[{"authors":["admin"],"categories":null,"content":"Currently pursuing my masters in Computer Science from The University of Texas at Arlington having specialization in Artificial Intelligence and Database.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://sushantmhambrey.github.io/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"Currently pursuing my masters in Computer Science from The University of Texas at Arlington having specialization in Artificial Intelligence and Database.","tags":null,"title":"Sushant Mhambrey","type":"authors"},{"authors":[],"categories":[],"content":"","date":1588931022,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588931022,"objectID":"2e076de1d09a63f83a2fb284eb8c6a4a","permalink":"https://sushantmhambrey.github.io/post/assn3/","publishdate":"2020-05-08T04:43:42-05:00","relpermalink":"/post/assn3/","section":"post","summary":"","tags":[],"title":"Assn3","type":"post"},{"authors":[],"categories":[],"content":"","date":1583489978,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1583489978,"objectID":"5331ef7925d4e42203f8c3e4ab77783f","permalink":"https://sushantmhambrey.github.io/project/nlp/","publishdate":"2020-03-06T04:19:38-06:00","relpermalink":"/project/nlp/","section":"project","summary":"real or fake tweet detection from a handpicked dataset of 10000 tweets using the concepts of natural languauge processing.","tags":[],"title":"NLP","type":"project"},{"authors":[],"categories":[],"content":"","date":1580360449,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580360449,"objectID":"9785e6cbb2b1405c01e51871f2357d05","permalink":"https://sushantmhambrey.github.io/project/pipe/","publishdate":"2020-01-29T23:00:49-06:00","relpermalink":"/project/pipe/","section":"project","summary":"Implemented a simple data pipeline to count the number of visitors on a website each day","tags":[],"title":"Data Pipeline ","type":"project"},{"authors":[],"categories":[],"content":"","date":1580360439,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580360439,"objectID":"1e1448d2639e1b7b7d45f78ea9644207","permalink":"https://sushantmhambrey.github.io/project/be/","publishdate":"2020-01-29T23:00:39-06:00","relpermalink":"/project/be/","section":"project","summary":"Implemented a project to virtually try footwear through a mobile application. Created AR models for shoes using Vuforia and Unity3d. Used YOLO algorithm to train image dataset","tags":[],"title":"Virtual Shoe Trial","type":"project"},{"authors":[],"categories":[],"content":"","date":1580360432,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580360432,"objectID":"a6d8e05c0c4b41be700bae6f8cb99b68","permalink":"https://sushantmhambrey.github.io/project/damt/","publishdate":"2020-01-29T23:00:32-06:00","relpermalink":"/project/damt/","section":"project","summary":"Implemented a project based on the probability distribution and their distribution functions .Simulated and analyzed various discrete and continuous probability distributions using Python3.  ","tags":[],"title":"Simulation of Random Variables","type":"project"},{"authors":[],"categories":[],"content":"","date":1580358031,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580358031,"objectID":"957a80445972d2e6a8474d2b53cd2a01","permalink":"https://sushantmhambrey.github.io/project/ai/","publishdate":"2020-01-29T22:20:31-06:00","relpermalink":"/project/ai/","section":"project","summary":"Implemented an AI program using Python3 to play Connect4 interactively based on a MinMax strategy. Evaluated board states to make an optimal decision for the next move ","tags":[],"title":"Connect4 board game ","type":"project"},{"authors":null,"categories":null,"content":"Introduction to kNN\nThe K-nearest-neighbor (kNN) is one of the most important and simple methods which can be used for both classification and regression problems but is more widely preferred in classification. Although it is simplistic in nature, the KNN algorithm can have better performance levels than many other classifiers’ is usually referred to as a “lazy, non parametric” learning algorithm. A non-parametric technique usually means that it does not assume anything about the data distribution. The structure of the model is defined by the data which is very advantageous when viewed from real world perspective. For these reasons , the rudimentary kNN algorithm can be considered as a good starting point for classification problems containing little or no prior knowledge about distribution data.\rOne of the most important test cases of kNN can be determining similarity of documents(sometimes referred to as “Concept Search”).Though kNN is easy to use and understand it has its own downfalls.As compared to neural network or SVM , kNN performs really slowly and can sometimes be less accurate.\nThe kNN working is really simple. There is minimal training and heavy testing involved. When we need to make a prediction, the k-most similar neighbors are located and an equivalent prediction is made. It is like forming a “majority vote” between the k most similar instances to a new unobserved instance. Similarity is the distance metric between two data points. There are a number of distance measures available each with better accuracy than other depending on the given use cases and the hyperparameter selections. Usually a good starting point of distance measure in case of tabular data is the “Euclidian distance”\nExporting the necessary libraries\nimport numpy as np import pandas as pd\rimport seaborn as sns\rfrom collections import Counter\r The assignment is about leveraging kNN in Python on a simple classification problem.The dataset at hand is the “Iris Flower Dataset(IFD)” taken from UC Irvine Machine Learning Repository. The set has 3 Iris species((Iris setosa, Iris virginica and Iris versicolor) each having 50 observations. We have 4 features(attributes): 2 length(sepal_length,petal_length) and 2 width(sepal_width,petal_width)\niris = pd.read_csv(\u0026quot;iris.csv\u0026quot;)\r Observing the data. Iris dataset consists of four features and one class attribute\niris.head()\r \r.dataframe tbody tr th:only-of-type {\rvertical-align: middle;\r}\r.dataframe tbody tr th {\rvertical-align: top;\r}\r.dataframe thead th {\rtext-align: right;\r}\r \n\r\rsepal_length\rsepal_width\rpetal_length\rpetal_width\rclass\r\r\r\r\r0\r5.1\r3.5\r1.4\r0.2\rIris-setosa\r\r\r1\r4.9\r3.0\r1.4\r0.2\rIris-setosa\r\r\r2\r4.7\r3.2\r1.3\r0.2\rIris-setosa\r\r\r3\r4.6\r3.1\r1.5\r0.2\rIris-setosa\r\r\r4\r5.0\r3.6\r1.4\r0.2\rIris-setosa\r\r\r\r\riris.describe()\r \r.dataframe tbody tr th:only-of-type {\rvertical-align: middle;\r}\r.dataframe tbody tr th {\rvertical-align: top;\r}\r.dataframe thead th {\rtext-align: right;\r}\r \n\r\rsepal_length\rsepal_width\rpetal_length\rpetal_width\r\r\r\r\rcount\r150.000000\r150.000000\r150.000000\r150.000000\r\r\rmean\r5.843333\r3.054000\r3.758667\r1.198667\r\r\rstd\r0.828066\r0.433594\r1.764420\r0.763161\r\r\rmin\r4.300000\r2.000000\r1.000000\r0.100000\r\r\r25%\r5.100000\r2.800000\r1.600000\r0.300000\r\r\r50%\r5.800000\r3.000000\r4.350000\r1.300000\r\r\r75%\r6.400000\r3.300000\r5.100000\r1.800000\r\r\rmax\r7.900000\r4.400000\r6.900000\r2.500000\r\r\r\r\rAnalysing the data and plotting various iris classes in swarmplot.\nFrom the plot it can be observed that iris setosa has the least length range while virginica has the longest range\nsns.swarmplot(x='class',y='sepal_length',data=iris)\r \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x16d2639ac88\u0026gt;\r iris.groupby('class').size()\r class\rIris-setosa 50\rIris-versicolor 50\rIris-virginica 50\rdtype: int64\r from sklearn.preprocessing import LabelEncoder\rfeature_columns = ['sepal_length', 'sepal_width', 'petal_length','petal_width']\rX = np.array(iris[feature_columns])\ry = np.array(iris['class'])\rnp.size(y)\r 150\r The last column of the dataset represents the class values of the corresponding data.We need to convert this into integer for prediction\nlast_column= LabelEncoder()\ry = last_column.fit_transform(y)\ry\rfrom sklearn.model_selection import train_test_split\r We can observe that the classes are assigned integer values respectively. Example:: Iris-Setosa becomes 0, Versicolor becomes 1 and Virginica becomes 2 X_dev, X_test, y_dev, y_test = train_test_split(X, y, test_size = 0.35)\r Writing kNN fit from scratch Here is where we implement the actual magic. In a nutshell , a particular row is measure against the rest of the development set and a majority vote is returned.As we have seen earlier kNN is a Lazy algorithm , it doesnt require an implementation of a train function--which is just learning the data.\nfrom numpy import dot\rfrom numpy.linalg import norm\r#----------EUCLIDIAN DISTANCE------------------------\rdef My_knn_fit(X_dev, y_dev, x_test, k,measure):\rif(measure==\u0026quot;euc\u0026quot;):\rdist_euc = []\rclass_output = []\rfor i in range(len(X_dev)):\rdist_euc.append([np.sqrt(np.sum(np.square(x_test - X_dev[i, :]))),i])\rdist_euc_sort = sorted(dist_euc)\rfor i in range(k):\rclass_in = dist_euc_sort[i][1]\rclass_output.append(y_dev[class_in])\rmajority_vote=Counter(class_output).most_common(1)[0][0]\rreturn majority_vote\r#------------COSINE DISTANCE--------------------------- elif(measure==\u0026quot;cosine\u0026quot;):\rdist_cos = []\rclass_output = []\rfor i in range(len(X_dev)):\rcos_sim = np.sum((dot(x_test,X_dev[i, :]))/(norm(X_dev[i, :])*norm(x_test)))\rcos_dis=(1-cos_sim)\rdist_cos.append([(cos_dis),i])\rdist_cos_sort = sorted(dist_cos)\rfor i in range(k):\rclass_in = dist_cos_sort[i][1]\rclass_output.append(y_dev[class_in])\rmajority_vote=Counter(class_output).most_common(1)[0][0] return majority_vote\r#------------NORMALIZED-EUCLIDIAN DISTANCE-------------\relif(measure==\u0026quot;norm_euc\u0026quot;): #0.5*var(X-Y)/var(x)-var(y)\rdist_norm = []\rclass_output = []\rfor i in range(len(X_dev)):\rdist_norm.append([np.sum((np.var(X_dev[i, :]-x_test)/(np.var(X_dev[i,:]-np.var(x_test))))),i])\rdist_norm_sort = sorted(dist_norm)\rfor i in range(k):\rclass_in = dist_norm_sort[i][1]\rclass_output.append(y_dev[class_in])\rmajority_vote=Counter(class_output).most_common(1)[0][0] return majority_vote\r Implementing kNN predict function def My_KNN_predict(X_dev, y_dev, X_test, k):\rpred_euc = []\rpred_cosine=[]\rpred_norm=[]\rfor i in range(len(X_test)):\rpred_euc.append(My_knn_fit(X_dev, y_dev, X_test[i, :], k,\u0026quot;euc\u0026quot;))\rpred_cosine.append(My_knn_fit(X_dev, y_dev, X_test[i, :], k,\u0026quot;cosine\u0026quot;))\rpred_norm.append(My_knn_fit(X_dev, y_dev, X_test[i, :], k,\u0026quot;norm_euc\u0026quot;))\rpred_euc=np.array(pred_euc)\rpred_cosine=np.array(pred_cosine)\rpred_norm=np.array(pred_norm)\r#print(\u0026quot;cos:\u0026quot;,pred_cosine)\r#print(\u0026quot;norm:\u0026quot;,pred_norm)\rreturn (pred_euc,pred_cosine,pred_norm)\r  Let's try out a random input taken from the csv file to see if the predcition is done correctly.The random input taken belong to setosa which corresponds to class 0 ran=[5.1,3.5,1.4,0.2]\rpredin=My_knn_fit(X_dev,y_dev,ran,5,\u0026quot;euc\u0026quot;)\rif(predin==0):\rprint(\u0026quot;iris-setosa\u0026quot;)\relif(predin==1):\rprint(\u0026quot;iris-versicolor\u0026quot;)\relse:\rprint(\u0026quot;iris-virginica\u0026quot;)\r iris-setosa\r def accuracy_scor(y_test, prediction):\rcorrect = 0\rn = len(y_test)\rfor i in range(n):\rif(y_test[i]==prediction[i]):\rcorrect+=1\raccuracy_sc = (correct*100)/n\rreturn accuracy_sc\racc_cosine=[]\racc_euc=[]\racc_norm=[]\rfor k in range(1,8,2):\rpred_euc,pred_cosine,pred_norm = My_KNN_predict(X_dev, y_dev, X_test,k)\r# evaluating accuracy\raccuracy1 = accuracy_scor(y_test, pred_euc)\racc_euc.append(accuracy1)\raccuracy2=accuracy_scor(y_test, pred_cosine)\racc_cosine.append(accuracy2)\raccuracy3=accuracy_scor(y_test, pred_norm)\racc_norm.append(accuracy3)\rprint(\u0026quot;Euclidian accuracy:\u0026quot;,(acc_euc))\rprint(\u0026quot;Cosine accuracy:\u0026quot;,(acc_cosine))\rprint(\u0026quot;Normalised-Euclidian:\u0026quot;,(acc_norm))\r Euclidian accuracy: [94.33962264150944, 94.33962264150944, 96.22641509433963, 96.22641509433963]\rCosine accuracy: [92.45283018867924, 96.22641509433963, 98.11320754716981, 98.11320754716981]\rNormalised-Euclidian: [96.22641509433963, 98.11320754716981, 98.11320754716981, 98.11320754716981]\r k=[1,3,5,7]\rsns.set(style=\u0026quot;whitegrid\u0026quot;)\rax=sns.barplot(x=k, y=acc_euc, data=iris)\rax.set(ylim=(85, 100))\rax.set(xlabel='K-value', ylabel='Accuracy(Euclidian)')\r [Text(0, 0.5, 'Accuracy(Euclidian)'), Text(0.5, 0, 'K-value')]\r k=[1,3,5,7]\rsns.set(style=\u0026quot;whitegrid\u0026quot;)\rax=sns.barplot(x=k, y=acc_cosine, data=iris)\rax.set(ylim=(85,100))\rax.set(xlabel='K-value', ylabel='Accuracy(Cosine)')\r [Text(0, 0.5, 'Accuracy(Cosine)'), Text(0.5, 0, 'K-value')]\r k=[1,3,5,7]\rsns.set(style=\u0026quot;whitegrid\u0026quot;)\rax=sns.barplot(x=k, y=acc_cosine, data=iris)\rax.set(ylim=(85,100))\rax.set(xlabel='K-value', ylabel='Accuracy(Normalized Euclidian)')\r [Text(0, 0.5, 'Accuracy(Normalized Euclidian)'), Text(0.5, 0, 'K-value')]\r We see the various accuracies we get on euclidian , cosine and normalised euclidian distances with the various k values of 1,3,5,7.Let's see what happens when we run the fit and predict on hyperparameter K value from 1 to 20\nacc_cosine1=[]\racc_euc1=[]\racc_norm1=[]\rfor k in range(1,20,1):\rpred_euc,pred_cosine,pred_norm = My_KNN_predict(X_dev, y_dev, X_test,k)\r# evaluating accuracy\raccuracy1 = accuracy_scor(y_test, pred_euc)\racc_euc1.append(accuracy1)\raccuracy2=accuracy_scor(y_test, pred_cosine)\racc_cosine1.append(accuracy2)\raccuracy3=accuracy_scor(y_test, pred_norm)\racc_norm1.append(accuracy3)\rprint(\u0026quot;Euclidian accuracy:\u0026quot;,max(acc_euc1),acc_euc1.index(max(acc_euc1))+1)\rprint(\u0026quot;Cosine accuracy:\u0026quot;,max(acc_cosine1),acc_cosine1.index(max(acc_cosine1))+1)\rprint(\u0026quot;Normalised-Euclidian:\u0026quot;,max(acc_norm1),acc_norm1.index(max(acc_norm1))+1)\r Euclidian accuracy: 100.0 7\rCosine accuracy: 100.0 1\rNormalised-Euclidian: 100.0 4\r We can see that considering the given parameters we get optimal values at k=5 for cosine similarity and if we iterate over values of k on 1 to 20 we get perfect scores which maybe due to perfectly labelled data or sometimes overfitting.\rdef My_KNN_predict_test(X_dev, y_dev, X_test, k):\rpred_cosine=[]\rfor i in range(len(X_test)):\rpred_cosine.append(My_knn_fit(X_dev, y_dev, X_test[i, :], k,\u0026quot;cosine\u0026quot;))\rpred_cosine=np.array(pred_cosine)\r#print(\u0026quot;cos:\u0026quot;,pred_cosine)\r#print(\u0026quot;norm:\u0026quot;,pred_norm)\rreturn (pred_euc,pred_cosine,pred_norm)\rprint(\u0026quot;Final accuracy of the optimal hyperparameter wrt to test set:\u0026quot;,acc_cosine[2])\rdef My_knn_fit_test(X_dev, y_dev, x_test, k,measure):\rif(measure==\u0026quot;cosine\u0026quot;):\rdist_cos = []\rclass_output = []\rfor i in range(len(X_dev)):\rcos_sim = np.sum((dot(x_test,X_dev[i, :]))/(norm(X_dev[i, :])*norm(x_test)))\rcos_dis=(1-cos_sim)\rdist_cos.append([(cos_dis),i])\rdist_cos_sort = sorted(dist_cos)\rfor i in range(k):\rclass_in = dist_cos_sort[i][1]\rclass_output.append(y_dev[class_in])\rmajority_vote=Counter(class_output).most_common(1)[0][0] return majority_vote\r Final accuracy of the optimal hyperparameter wrt to test set: 98.11320754716981\r As we can already see , one of the most advantageous features of kNN apart from being simple and easy to understand is that requires minimal to no training time and serves as a good starting point in learning algorithms.We also saw that though \"COSINE SIMILARITY WITH A HYPERPARAMTER OF 5\" performed the best with an almost perfect accuracy , it took a lot of time to process as might have compared to other algorithms.Some of the improvements that can be done are using other distance metrics to measure perfomance or using dimensionality reduction techniques depending on the dataset.\n ","date":1567296000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1567296000,"objectID":"3d230d6f6427eb876a194b8e445d3a8b","permalink":"https://sushantmhambrey.github.io/post/assn2/","publishdate":"2019-09-01T00:00:00Z","relpermalink":"/post/assn2/","section":"post","summary":"Introduction to kNN\nThe K-nearest-neighbor (kNN) is one of the most important and simple methods which can be used for both classification and regression problems but is more widely preferred in classification. Although it is simplistic in nature, the KNN algorithm can have better performance levels than many other classifiers’ is usually referred to as a “lazy, non parametric” learning algorithm. A non-parametric technique usually means that it does not assume anything about the data distribution.","tags":null,"title":"Implementing kNN from scratch on IRIS dataset","type":"post"},{"authors":null,"categories":null,"content":"We know that even though linear models can provide good training models rudimentarily, there are lots of situations where the variables don\u0026rsquo;t reveal a linear relationship. Thus we need to create polynomial models for such datasets.One major issue with polynomial models is that they are suspectible to overfitting.In this article we will look at how a higher degree polynomial model overfits a dataset to create a perfect training environment as opposed to it\u0026rsquo;s errors introduced while testing on the same degree.We will further look at how regularization helps to tackel overfitting and what values of hyperparameters produce the best results.\nImporting the necessary libraries\nimport math\rimport pandas as pd\rimport operator\rimport numpy as np\rfrom sklearn.model_selection import train_test_split\rimport matplotlib.pyplot as plt\rfrom sklearn.metrics import mean_squared_error\rfrom sklearn.linear_model import LinearRegression\rfrom sklearn.linear_model import Ridge\rfrom sklearn.preprocessing import PolynomialFeatures\r#from sklearn.linear_model import Lasso\r#from sklearn.linear_model import ElasticNet\rfrom sklearn.pipeline import make_pipeline\rfrom sklearn.pipeline import Pipeline\rfrom sklearn.preprocessing import StandardScaler\r Creating X,Y data pairs.Here x is sampled from a uniform distribution and N from a gaussian normal distribution\n#we can change the seed value to get different randome numbers for our x,N values\rnp.random.seed(45)\rx=np.random.uniform(low=0,high=1,size=20)\rmu=0\rsigma=1\r#N is based on a gaussian normal distribution\rN=np.random.normal(mu,sigma,size=20)\ry=(np.sin(2*np.pi*x))+N\r #splitting the dataset into 10 for training and 10 for testing\rx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.5)\rx_train\r array([0.97600332, 0.62739168, 0.44053089, 0.99072168, 0.16332445,\r0.07728957, 0.28266721, 0.673068 , 0.47280797, 0.048522 ])\r #a reference true fit graph to see how our data fits with different polynomial degrees\rx_rn=np.linspace(0,1,100)\ry_rn=(np.sin(2*np.pi*x_rn))\rplt.scatter(x_train,y_train,s=10,color=\u0026quot;red\u0026quot;)\rplt.plot(x_rn,y_rn)\rplt.show()\r Making the graphs for fit data with the specific degrees ranging from 0 to 9 We can observe that as we increase the degree of our polynomial regression model , the graph tends to cover all the datapoints leading to overfitting from sklearn.pipeline import make_pipeline\r#x = np.sort(x_train[:])\r#y=np.sort(y_train[:])\rtrain_error=[]\rtest_error=[] for i in range(10):\rplt.title('Degree %d' %i)\rplt.text(0.7, .55, 'M=%d' %i)\rX = x_train[:, np.newaxis]\rY = y_train[:, np.newaxis]\rX1 = x_test[:,np.newaxis]\rY1 = y_test[:,np.newaxis]\r#we first make use of the linearregression model to observe how it overfits at higher degrees.\rmodel = make_pipeline(PolynomialFeatures(i), LinearRegression())\rmodel.fit(X,Y)\ry_pred = model.predict(X)\rmse = (mean_squared_error(Y,y_pred))\rrmse=math.sqrt(mse)\rtrain_error.append(rmse)\ry_test_pred=model.predict(X1)\rmse_test= (mean_squared_error(Y1,y_test_pred))\rrmse_test=math.sqrt(mse_test)\rtest_error.append(rmse_test)\r#sorting\rlists=sorted(zip(*[X,y_pred]))\rX,y_pred = list(zip(*lists))\r#plotting the models at various degrees.\rplt.scatter(x_train, y_train,color='black',label='data points')\rplt.plot(X, y_pred, color='g',label='degree_fit')\rplt.plot(x_rn,y_rn,color='r',label='true_fit')\rplt.legend(loc=\u0026quot;lower left\u0026quot;)\r_=plt.xlabel(\u0026quot;X--\u0026gt;\u0026quot;)\r_=plt.ylabel(\u0026quot;t--\u0026gt;\u0026quot;)\rplt.show()\r Plotting training vs test error\rplt.plot(train_error,label='train error')\rplt.plot(test_error,label='test error')\rplt.xticks(np.arange(0, 10, 1.0))\rplt.legend(loc=\u0026quot;upper left\u0026quot;)\r_=plt.xlabel(\u0026quot;M\u0026quot;)\r_=plt.ylabel(\u0026quot;E(RMS)\u0026quot;)\rplt.show()\r Generating 100 data points and fitting ninth order model on it #creating 100 data points\rnp.random.seed(10)\rx2=np.random.uniform(low=0,high=1,size=100)\rmu=0\rsigma=1\rN2=np.random.normal(mu,sigma,size=100)\ry2=(np.sin(2*np.pi*x2))+N2\r x_train100, x_test100, y_train100, y_test100 = train_test_split(x2, y2, test_size=0.01)\r X100 = x_train100[:, np.newaxis]\rY100 = y_train100[:, np.newaxis]\rmodel = make_pipeline(PolynomialFeatures(9), LinearRegression())\r#fitting the 100 data points of the ninth order model.\rmodel.fit(X100,Y100)\ry_pred100 = model.predict(X100)\r#sorting\rlists=sorted(zip(*[X100,y_pred100]))\rX100,y_pred100 = list(zip(*lists))\rplt.scatter(x_train100, y_train100,color='#3299a8',label='data points')\rplt.plot(X100, y_pred100, color='r',label='model fit')\rplt.plot(x_rn,y_rn,color='b',label='true fit')\rplt.legend(loc=\u0026quot;lower left\u0026quot;)\r_=plt.xlabel(\u0026quot;X--\u0026gt;\u0026quot;)\r_=plt.ylabel(\u0026quot;Y--\u0026gt;\u0026quot;)\rplt.show()\r Regularisation and graph creation for different values of lambda\nlbd=[1, 1/10, 1/100, 1/1000, 1/10000, 1/100000]\rplt.ylim(-2,2)\rtrain_error2=[]\rtest_error2=[]\rfor i in range(6):\rmodel1= make_pipeline(StandardScaler(),PolynomialFeatures(degree=9), Ridge(alpha=lbd[i],fit_intercept=True))\rmodel1.fit(X,Y)\ry_pred2 = model1.predict(X)\rmse2 = (mean_squared_error(Y,y_pred2))\rrmse2=math.sqrt(mse2)\rtrain_error2.append(rmse2)\ry_test_pred2=model1.predict(X1)\rmse_test2= (mean_squared_error(Y1,y_test_pred2))\rrmse_test2=math.sqrt(mse_test2)\rtest_error2.append(rmse_test2)\rlists=sorted(zip(*[X,y_pred2]))\rX,y_pred2 = list(zip(*lists))\rplt.scatter(X,Y,color='black')\rplt.plot(X, y_pred2, color='g')\rplt.plot(x_rn,y_rn,color='r')\r_=plt.xlabel(\u0026quot;X--\u0026gt;\u0026quot;)\r_=plt.ylabel(\u0026quot;t--\u0026gt;\u0026quot;)\rplt.show()\r#print('Score: {}'.format(model1.score(X,Y)))\r#print('Test :{}' .format(model1.score(x_test.reshape(-1,1),y_test.reshape(-1,1))))\r Plotting Training vs Test values for various lambda plt.plot(np.log(lbd),train_error2,label='train error')\rplt.plot(np.log(lbd),test_error2,label='test error')\r#plt.xscale(\u0026quot;log\u0026quot;)\r#plt.xticks(np.arange(0, 1.1, 0.1))\rplt.xlim(-10,0)\rplt.legend(loc=\u0026quot;upper right\u0026quot;)\r_=plt.xlabel(\u0026quot;ln(lambda)\u0026quot;)\r_=plt.ylabel(\u0026quot;E(RMS)\u0026quot;)\rplt.show()\r#print(test_error2)\r Based on best test perfomance the Ridge model helps us to regularize our overfitting which we could not do throug LinearRegression. We observe that as the model complexity increases,bias decreases and variance increases and vice versa.Also,we can see that as the lambda value decreases we get a good training score and we obtain the best training score for lambda =1/100000.But thats not the case with the testing score.Before we regularise, we see that the model of degree 9 fits all the data points but leads to overfitting.So a polynoial regression model of degree 6 will be best amongst what we tried without leading to overfit.Also after we regularize we see that the lambda values are almost constant before increasing so the model with lambda 1/1000 seems to be the best  ","date":1567296000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1567296000,"objectID":"d1fbd2368984ab1e3228f518123c62c2","permalink":"https://sushantmhambrey.github.io/post/assn1/","publishdate":"2019-09-01T00:00:00Z","relpermalink":"/post/assn1/","section":"post","summary":"We know that even though linear models can provide good training models rudimentarily, there are lots of situations where the variables don\u0026rsquo;t reveal a linear relationship. Thus we need to create polynomial models for such datasets.One major issue with polynomial models is that they are suspectible to overfitting.In this article we will look at how a higher degree polynomial model overfits a dataset to create a perfect training environment as opposed to it\u0026rsquo;s errors introduced while testing on the same degree.","tags":null,"title":"UNDERSTANDING OVERFITTING USING POLYNOMIAL REGRESSION","type":"post"}]
[{"authors":["admin"],"categories":null,"content":"Currently pursuing my masters in Computer Science from The University of Texas at Arlington having specialization in Artificial Intelligence and Database.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://sushantmhambrey.github.io/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"Currently pursuing my masters in Computer Science from The University of Texas at Arlington having specialization in Artificial Intelligence and Database.","tags":null,"title":"Sushant Mhambrey","type":"authors"},{"authors":null,"categories":null,"content":"**Data Mining Project Spring 2020**\rThe purpose of the term project is to predict the ratings given a particular review. Throughout the implementation of the term project many models were tested and based on the various evaluation metrics a model was selected. The dataset is taken from Kaggle BGG review dataset . Due to the vast length of dataset Google Colaboratory was used as the implementation platform\r#Linking colab to google drive where the dataset is saved\rfrom google.colab import drive\rimport zipfile\r#Mount the drive\rdrive.mount('/content/gdrive')\r Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\u0026quot;/content/gdrive\u0026quot;, force_remount=True).\r Extracting tar file using zipfile module. We have a huge dataset (around 13 million rows)\nzip_ref = zipfile.ZipFile(\u0026quot;/content/gdrive/My Drive/Colab Notebooks/bgg-13m-reviews.zip\u0026quot;, 'r')\rzip_ref.extractall(\u0026quot;/tmp\u0026quot;)\rzip_ref.close()\r  Importing the necessary libraries import numpy as np\rimport pandas as pd\rimport string import re import nltk\rfrom sklearn.feature_extraction.text import CountVectorizer\rfrom sklearn.feature_extraction.text import TfidfVectorizer\rfrom sklearn.metrics import confusion_matrix\rfrom sklearn.metrics import plot_confusion_matrix\rimport matplotlib.pyplot as plt\rfrom sklearn.metrics import classification_report\r Specifying the path where the csv file is stored\npath='/tmp/bgg-13m-reviews.csv'\r Reading the csv file as a data frame using the pandas module.In the read_csv we can specify nrows which indicates how many rows need to be read\ndf = pd.read_csv(path, delimiter=',')\rnRow, nCol = df.shape\r#print(f'There are {nRow} rows and {nCol} columns')\r The first part of the project is just analysis of the data file to see how the ratings class is spread. The spread is quite lobsided toward a seven rating which is tackled later in the notebook. Textual data like the comment section of the BGG requires a considerable ammount of preprocessing. Cleaning techniques like removal of punctuation, returing string.lower() and removal of NaN values is used.\ndf=df.dropna()\r#print(df.count())\r Seeing how our data frame looks like.The two main columns we are going to use in the project are comment and rating.\ndf.head()\r \r.dataframe tbody tr th:only-of-type {\rvertical-align: middle;\r}\r.dataframe tbody tr th {\rvertical-align: top;\r}\r.dataframe thead th {\rtext-align: right;\r}\r \n\r\rUnnamed: 0\ruser\rrating\rcomment\rID\rname\r\r\r\r\r2\r2\rdougthonus\r10.0\rCurrently, this sits on my list as my favorite...\r13\rCatan\r\r\r3\r3\rcypar7\r10.0\rI know it says how many plays, but many, many ...\r13\rCatan\r\r\r7\r7\rhreimer\r10.0\ri will never tire of this game.. Awesome\r13\rCatan\r\r\r11\r11\rdaredevil\r10.0\rThis is probably the best game I ever played. ...\r13\rCatan\r\r\r16\r16\rhurkle\r10.0\rFantastic game. Got me hooked on games all ove...\r13\rCatan\r\r\r\r\rdf['rating'].hist(bins=10)\rplt.xlabel('rating of review')\rplt.ylabel('number of reviews')\rplt.show()\r plt.figure(figsize=(20, 7))\rdf['name'].value_counts()[:30].plot(kind='bar',color=\u0026quot;skyblue\u0026quot;)\rplt.ylabel('Count of Rating')\rplt.title('Top 30 Rated Games')\rplt.show()\r from wordcloud import WordCloud\rtext = df.comment[0]\r# Create and generate a word cloud image:\rwordcloud = WordCloud(width=400,background_color='black').generate(text)\r# Display the generated image:\rplt.imshow(wordcloud, interpolation='bilinear')\rplt.axis(\u0026quot;off\u0026quot;)\rplt.show()\r from nltk.corpus import stopwords\rfrom sklearn.feature_extraction import text\rstop = text.ENGLISH_STOP_WORDS\r Preprocessing the text. We remove white spaces, punctuations, stopwords and make the string lowercase\ndef remove_noise(text):\rtext = text.apply(lambda x: \u0026quot; \u0026quot;.join(x.lower() for x in x.split()))\rtext = text.apply(lambda x: \u0026quot; \u0026quot;.join(x.strip() for x in x.split()))\rtext = text.str.replace('[^\\w\\s]', '')\rtext = text.apply(lambda x: ' '.join([word for word in x.split() if word not in (stop)]))\rreturn text\rdf['comment'] = remove_noise(df['comment'])\r Checking the dataframe after cleaning\ndf.head()\r#print(df.info())\r \r.dataframe tbody tr th:only-of-type {\rvertical-align: middle;\r}\r.dataframe tbody tr th {\rvertical-align: top;\r}\r.dataframe thead th {\rtext-align: right;\r}\r \n\r\rUnnamed: 0\ruser\rrating\rcomment\rID\rname\r\r\r\r\r2\r2\rdougthonus\r10.0\rcurrently sits list favorite game\r13\rCatan\r\r\r3\r3\rcypar7\r10.0\rknow says plays uncounted liked version best\r13\rCatan\r\r\r7\r7\rhreimer\r10.0\rtire game awesome\r13\rCatan\r\r\r11\r11\rdaredevil\r10.0\rprobably best game played requires just thinki...\r13\rCatan\r\r\r16\r16\rhurkle\r10.0\rfantastic game got hooked games\r13\rCatan\r\r\r\r\rdef get_top_n_words(corpus, n=None):\rvec = CountVectorizer(stop_words = 'english').fit(corpus)\rbag_of_words = vec.transform(corpus)\rsum_words = bag_of_words.sum(axis=0) words_freq = [(word, sum_words[0, idx]) for word, idx in vec.vocabulary_.items()]\rwords_freq =sorted(words_freq, key = lambda x: x[1], reverse=True)\rreturn words_freq[:n]\rcommon_words = get_top_n_words(df['comment'], 30)\rfor word, freq in common_words:\r#print(word, freq)\rdf2 = pd.DataFrame(common_words, columns = ['ReviewText' , 'count'])\r#df2.groupby('ReviewText').sum()['count'].sort_values(ascending=False).iplot(\r#kind='bar', yTitle='Count', linecolor='black', title='Top 20 words in review after removing stop words')\r As we can see , after removing the stopwords these are our top 30 words\ndf2\r \r.dataframe tbody tr th:only-of-type {\rvertical-align: middle;\r}\r.dataframe tbody tr th {\rvertical-align: top;\r}\r.dataframe thead th {\rtext-align: right;\r}\r \n\r\rReviewText\rcount\r\r\r\r\r0\rgame\r2539119\r\r\r1\rplay\r743697\r\r\r2\rlike\r520940\r\r\r3\rfun\r517789\r\r\r4\rgood\r398781\r\r\r5\rgames\r392353\r\r\r6\rplayers\r369127\r\r\r7\rreally\r359752\r\r\r8\rplayed\r353415\r\r\r9\rgreat\r329474\r\r\r10\rjust\r325831\r\r\r11\rcards\r318786\r\r\r12\rtime\r267260\r\r\r13\rplayer\r243939\r\r\r14\rrules\r206405\r\r\r15\rplaying\r205275\r\r\r16\rlittle\r197550\r\r\r17\rcard\r196163\r\r\r18\rdont\r194497\r\r\r19\rplays\r190899\r\r\r20\rlot\r186532\r\r\r21\rbetter\r185508\r\r\r22\rtheme\r174505\r\r\r23\rbit\r172440\r\r\r24\rinteresting\r169584\r\r\r25\rnice\r165569\r\r\r26\rlove\r162851\r\r\r27\rthink\r162404\r\r\r28\rbest\r145424\r\r\r29\rsimple\r143521\r\r\r\r\rdf2['ReviewText'].value_counts()[:30].plot(kind='bar',color=\u0026quot;skyblue\u0026quot;)\rplt.xlabel('rating of review')\rplt.ylabel('number of reviews')\rplt.show()\r #counting the number of ratings to each number\rfrom collections import Counter\rrate = df['rating'].values\rrate=rate.astype(int)\r Our data is arranged such that all the ratings are in ascending order thus we need to shuffle the data before splitting into training and test sets\ndf = df.sample(frac=1).reset_index(drop=True)\r df1=df.sample(n=16000)\rprint(df1.count())\r Unnamed: 0 16000\ruser 16000\rrating 16000\rcomment 16000\rID 16000\rname 16000\rdtype: int64\r Assigning \u0026lsquo;x\u0026rsquo; to the comment section and \u0026lsquo;y\u0026rsquo; to the rating section of our data frame\nx=df1['comment'].values\ry=np.round(df1['rating'].values)\r from sklearn.model_selection import train_test_split\rX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42)\r Just a look at how our X_test looks. We need to vectorise the data because ML models require vector represenation of texts\nFor textutal data to be processed it needs to be coverted into a vector matrix representation.But just calculating the count(or frequency) of the terms might result in percieving all the terms as equally important. The TF-IDF vectorizer attenuates the terms whose occurence is common and not of much relevance and gives importance to more relevant terms.Mathematically speaking Tf is ratio of number of times a word occurred in a document to the total number of words in the document. and IDF is the log of total docs divided by docs containing the word.\nVectorising the data\nvect = TfidfVectorizer(stop_words = 'english',max_df=0.7,max_features=10000)\rx_train_cv = vect.fit_transform(X_train)\rx_test_cv = vect.transform(X_test)\r Trying of the different ML modules now\nfrom sklearn.naive_bayes import MultinomialNB\rfrom sklearn.linear_model import RidgeClassifier\rfrom sklearn.neighbors import KNeighborsClassifier\rfrom sklearn.externals import joblib\rfrom sklearn.ensemble import VotingClassifier\rfrom sklearn.svm import SVC\rfrom sklearn.metrics import accuracy_score\r accuracy_all=[]\rprint(accuracy_all)\r []\r Our first model is Multinomial Naive Bayes. One of the most simple Naive Bayes model is the Gaussian Naive Bayes model because it works under the assumption that the data is decribed by the Gaussian distribution but there is also Multinomial Naive Bayes that can be used to get the generative distribution within each label.Here the features are assumed to be generated from a simple multinomia distribution. It is suitale for features that have counts(like ratings in our data) because it describes the probability of observing count among number of various categories.\n$$ P(c|d) =P(c) \\prod_{k=1}^n P(t_k|c) $$\n#Implementing MultinomialNB\rmodel = MultinomialNB()\rmodel.fit(x_train_cv, y_train.astype('int'))\rvalue = model.predict(x_test_cv)\raccuracy_NB=accuracy_score(y_test,value)\rprint(\u0026quot;accuracy of Naive Bayes\u0026quot;,accuracy_NB)\r accuracy of Naive Bayes 0.2914583333333333\r disp=plot_confusion_matrix(model, x_test_cv, y_test)\r print(\u0026quot;Classification report for Multinomial Naive Bayes \\n\u0026quot;,classification_report(y_test,value))\r Classification report for Multinomial Naive Bayes precision recall f1-score support\r1.0 0.00 0.00 0.00 29\r2.0 0.00 0.00 0.00 75\r3.0 0.00 0.00 0.00 124\r4.0 0.00 0.00 0.00 271\r5.0 0.00 0.00 0.00 359\r6.0 0.30 0.23 0.26 967\r7.0 0.28 0.23 0.25 1059\r8.0 0.29 0.77 0.42 1204\r9.0 0.00 0.00 0.00 445\r10.0 0.00 0.00 0.00 267\raccuracy 0.29 4800\rmacro avg 0.09 0.12 0.09 4800\rweighted avg 0.20 0.29 0.22 4800\r/usr/local/lib/python3.6/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\r_warn_prf(average, modifier, msg_start, len(result))\r The next model we use is the Support Vector Machine methodolgy. SVM model is mostly used for discriminative classification as opposed to generative classification.We use the scikit learns SVM module to train our model.\nsvm= SVC(kernel='linear',probability=True)\rsvm.fit(x_train_cv,y_train)\rpred=svm.predict(x_test_cv)\raccuracy_svm=accuracy_score(y_test,pred)\rprint(\u0026quot;Accuracy of the SVC model:\u0026quot;,accuracy_svm)\r Accuracy of the SVC model: 0.2975\r print(\u0026quot;Classification report for SVM Model \\n\u0026quot;,classification_report(y_test,pred))\r Classification report for SVM Model precision recall f1-score support\r1.0 0.00 0.00 0.00 29\r2.0 0.00 0.00 0.00 75\r3.0 0.00 0.00 0.00 124\r4.0 0.16 0.02 0.03 271\r5.0 0.16 0.03 0.05 359\r6.0 0.29 0.37 0.33 967\r7.0 0.28 0.32 0.30 1059\r8.0 0.32 0.58 0.41 1204\r9.0 0.22 0.01 0.03 445\r10.0 0.26 0.04 0.08 267\raccuracy 0.30 4800\rmacro avg 0.17 0.14 0.12 4800\rweighted avg 0.26 0.30 0.25 4800\r/usr/local/lib/python3.6/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\r_warn_prf(average, modifier, msg_start, len(result))\r The next model we tested is the KNN model. It had the lowest accuracy among all other models.The k-nearest neighbors (KNN) algorithm is a supervised machine learning algorithm that can be used to solve both classification and regression problems. When we need to make a prediction, the k-most similar neighbors are located and an equivalent prediction is made. It is like forming a “majority vote” between the k most similar instances to a new unobserved instance. Similarity is the distance metric between two data points.\nkNN = KNeighborsClassifier(n_neighbors=7)\rkNN.fit(x_train_cv,y_train)\rpred_k = kNN.predict(x_test_cv)\raccuracy_knn = accuracy_score(y_test,pred_k)\rprint('Accuracy of KNN model',accuracy_knn)\r Accuracy of KNN model 0.21916666666666668\r print(\u0026quot;Classification report for KNN model \\n\u0026quot;,classification_report(pred_k,value))\r Classification report for KNN model precision recall f1-score support\r1.0 0.00 0.00 0.00 1\r2.0 0.00 0.00 0.00 12\r3.0 0.00 0.00 0.00 39\r4.0 0.00 0.00 0.00 130\r5.0 1.00 0.01 0.01 178\r6.0 0.28 0.18 0.22 1160\r7.0 0.38 0.20 0.26 1659\r8.0 0.31 0.69 0.42 1410\r9.0 0.00 0.00 0.00 161\r10.0 0.00 0.00 0.00 50\raccuracy 0.32 4800\rmacro avg 0.20 0.11 0.09 4800\rweighted avg 0.33 0.32 0.27 4800\r/usr/local/lib/python3.6/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\r_warn_prf(average, modifier, msg_start, len(result))\r Our next and the last model that we used is the Ridge Classifier.We use the sklearn.linear_model library of scikit learn to import the Ridge Classifier.\nclf=RidgeClassifier()\rclf.fit(x_train_cv,y_train)\rpred1=clf.predict(x_test_cv)\raccuracy_ridge=accuracy_score(y_test,pred1)\rprint(\u0026quot;Accuracy of the ridge classifier\u0026quot;,accuracy_ridge)\r Accuracy of the ridge classifier 0.2833333333333333\r accuracy_all.append(accuracy_NB)\raccuracy_all.append(accuracy_svm)\raccuracy_all.append(accuracy_ridge)\raccuracy_all.append(accuracy_knn)\r import matplotlib.pyplot as plt\rfig = plt.figure()\rax = fig.add_axes([0,0,1,1])\rlangs = ['NB', 'SVM', 'Ridge','KNN']\rstudents = accuracy_all\rax.bar(langs,students)\rplt.ylim(0,0.4,0.01)\rplt.show()\r We see that almost all the classifiers have the same accuraccy and even though SVM performs better , it takes a lot of time to process even on small datasets\nContribution\rApplying smoothing to our classifier and relaxing the problem can get us a better accuracy.\rWe have a broad range of classes from 1 to 10. Smoothing is applied by allowing a difference of 1 between the predicted and the target classes\rdef smoothing(predicted,actual):\rcounter=0\rfor i in range(len(predicted)):\rif(predicted[i]-actual[i]\u0026lt;2):\rcounter+=1\rreturn counter/len(predicted)\r acc_nb_smooth=smoothing(value,y_test)\racc_svm_smooth=smoothing(pred,y_test)\racc_ridge_smooth=smoothing(pred1,y_test)\racc_knn_smooth=smoothing(pred_k,y_test)\rprint(acc_nb_smooth)\rprint(acc_svm_smooth)\rprint(acc_ridge_smooth)\rprint(acc_knn_smooth)\r 0.7316666666666667\r0.7908333333333334\r0.78125\r0.783125\r accuracy_smooth=[]\r accuracy_smooth.append(accuracy_NB)\raccuracy_smooth.append(acc_nb_smooth)\raccuracy_smooth.append(accuracy_svm)\raccuracy_smooth.append(acc_svm_smooth)\raccuracy_smooth.append(accuracy_ridge)\raccuracy_smooth.append(acc_ridge_smooth)\raccuracy_smooth.append(accuracy_knn)\raccuracy_smooth.append(acc_knn_smooth)\r print(\u0026quot;MultinomialNB accuracy : {x:.2f} \u0026quot;.format(x=accuracy_NB))\rprint(\u0026quot;MultinomialNB accuracy after smoothing : {x:.2f} \u0026quot;.format(x=acc_nb_smooth))\rprint(\u0026quot;SVM accuracy : {x:.2f} \u0026quot;.format(x=accuracy_svm))\rprint(\u0026quot;SVM accuracy after smoothing : {x:.2f} \u0026quot;.format(x=acc_svm_smooth))\rprint(\u0026quot;Ridge accuracy : {x:.2f} \u0026quot;.format(x=accuracy_ridge))\rprint(\u0026quot;Ridge accuracy after smoothing : {x:.2f} \u0026quot;.format(x=acc_ridge_smooth))\r MultinomialNB accuracy : 0.29 MultinomialNB accuracy after smoothing : 0.73 SVM accuracy : 0.30 SVM accuracy after smoothing : 0.79 Ridge accuracy : 0.28 Ridge accuracy after smoothing : 0.78  fig = plt.figure()\rax = fig.add_axes([0,0,1,1])\rlangs = ['NB','NBS','svm','svmS','rig','rigS','knn','knnS']\rstudents = accuracy_smooth\rax.bar(langs,students)\rplt.ylim(0,1)\rplt.show()\r We see that individual algorithms prove to be a little inefficient.Using the concept of Ensemble Learning I combine the fastest model with the most efficient model to see if there is an increase in the accuracy.Rather than making use of one model , a weighted model is used.\nEB = VotingClassifier(estimators=[('Linear',svm), ('Nb',model)])\r Fitting our data to the model.A small problem can be that Linear SVM has a predict_prob function that is set to False by default , which we need to set to True\nEnsemble.fit(x_train_cv,y_train)\r VotingClassifier(estimators=[('Linear',\rSVC(C=1.0, break_ties=False, cache_size=200,\rclass_weight=None, coef0=0.0,\rdecision_function_shape='ovr', degree=3,\rgamma='scale', kernel='linear', max_iter=-1,\rprobability=True, random_state=None,\rshrinking=True, tol=0.001, verbose=False)),\r('Nb',\rMultinomialNB(alpha=1.0, class_prior=None,\rfit_prior=True))],\rflatten_transform=True, n_jobs=None, voting='hard',\rweights=None)\r e_pred=Ensemble.predict(x_test_cv)\r acc3=accuracy_score(e_pred,y_test)\rprint(acc3)\racc3_smooth=smoothing(e_pred,y_test)\rprint(acc3_smooth)\r 0.29854166666666665\r0.7979166666666667\r print(\u0026quot;Final accuracy on test data after applying smoothin and ensemble methods \\n\u0026quot;,acc3_smooth)\r Final accuracy on test data after applying smoothin and ensemble methods 0.7979166666666667\r  Challenges and Contributions\rOne of the more general challenges that I faced was tackling such a huge dataset.Using the method of sampling worked but had some variations in accuracy.Thus a more scaled data in terms of ratings did the job.\rSome specific challenge that I faced was to decide whether to use Word2Vec word embedding model. On further testing , it was seen that word embeddings actually created a lower accuracy.Doc2Vec word embeddings could have worked on the larger dataset if the accurate computation was present.On smaller dataset though, it made no difference. While creating ensembles,parameters of the individual models had to be tuned and dimensions had to be adjusted to properly fit our input to the model.Applying smoothing was one more contribution which helped to increase the accuracy.Had to relax certain terms of the model for that.\rEven though the database is large , it is more lobsided toward the ratings of 6 7 8 and scaling down the data does the trick.Overall, working on the dataset helped to understand key concepts from simple terms like creating charts of top 20 words or scaling down the data to more complex methodologies like smoothing and ensembles.\rReferences\rhttps://towardsdatascience.com/review-rating-prediction-a-combined-approach-538c617c495c\nhttps://towardsdatascience.com/ensemble-methods-in-machine-learning-what-are-they-and-why-use-them-68ec3f9fef5f\nhttps://www.kaggle.com/josh24990/nlp-ml-which-words-predict-a-recommendation\nhttps://www.developintelligence.com/blog/2017/03/predicting-yelp-star-ratings-review-text-python/\n\r ","date":1589241600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589241600,"objectID":"a9242545d7e051a4aecaab4dfe633eb5","permalink":"https://sushantmhambrey.github.io/post/final/","publishdate":"2020-05-12T00:00:00Z","relpermalink":"/post/final/","section":"post","summary":"**Data Mining Project Spring 2020**\rThe purpose of the term project is to predict the ratings given a particular review. Throughout the implementation of the term project many models were tested and based on the various evaluation metrics a model was selected. The dataset is taken from Kaggle BGG review dataset . Due to the vast length of dataset Google Colaboratory was used as the implementation platform\r#Linking colab to google drive where the dataset is saved\rfrom google.","tags":null,"title":"Data Mining Term Project","type":"post"},{"authors":null,"categories":null,"content":"IMPLEMENTING NAIVE BAYES FROM SCRATCH USING MOVIE REVIEW DATASET\nNaive Bayes is one of the most common ML algorithms that is often used for the purpose of text classification. If you have just stepped into ML, it is one of the easiest classification algorithms to start with. Naive Bayes is a probabilistic classification algorithm as it uses probability to make predictions for the purpose of classification.\nImporting the necessary libraries\nimport numpy as np\rimport pandas as pd\rimport os\rimport string\r from sys import path from os import listdir\rfrom os.path import join\rimport re\rdef Load_Text_Files(dir_path):\r#dir_path=path[0]\rdir_path=review_dir_path\rfor file in listdir(dir_path):\rif '.txt' in file:\rpaths = [join(dir_path,data)]\rdocs = []\rfor path in paths:\rwith open(path, 'r') as file: docs.append(file.read())\rreturn docs\rdef Clean(review):\rp=re.sub(re.compile('\u0026lt;.*?\u0026gt;'),'',review)\rrev=re.sub('[^0-9a-zA-Z]+', ' ', review.lower())\rreturn rev\r import glob\rdata_train=[]\rfor file in glob.glob(os.path.join('train/neg/','*.txt')):\rf = open(file,'r',encoding=\u0026quot;utf8\u0026quot;)\rreview = f.read()\rdata_train.append([review,0])\rfor file in glob.glob(os.path.join('train/pos/','*.txt')):\rf = open(file,'r',encoding=\u0026quot;utf8\u0026quot;)\rreview = f.read()\rdata_train.append([review,1])\rdata_train = pd.DataFrame(data_train)\r data_train.head()\r \r.dataframe tbody tr th:only-of-type {\rvertical-align: middle;\r}\r.dataframe tbody tr th {\rvertical-align: top;\r}\r.dataframe thead th {\rtext-align: right;\r}\r \n\r\r0\r1\r\r\r\r\r0\rStory of a man who has unnatural feelings for ...\r0\r\r\r1\rOK its not the best film I've ever seen but at...\r0\r\r\r2\rAmateur, no budget films can be surprisingly g...\r0\r\r\r3\rMy girlfriend once brought around The Zombie C...\r0\r\r\r4\rWithout wishing to be a killjoy, Brad Sykes is...\r0\r\r\r\r\rdata_test=[]\rfor file in glob.glob(os.path.join('test/neg/','*.txt')):\rf = open(file,'r',encoding=\u0026quot;utf8\u0026quot;)\rreview = f.read()\rdata_test.append([review,0])\rfor file in glob.glob(os.path.join('test/pos/','*.txt')):\rf = open(file,'r',encoding=\u0026quot;utf8\u0026quot;)\rreview = f.read()\rdata_test.append([review,1])\r#appended values 0 and 1 represents negative and positive reviews about movies, respectively\rdata_test = pd.DataFrame(data_test)\r data_test.head()\r \r.dataframe tbody tr th:only-of-type {\rvertical-align: middle;\r}\r.dataframe tbody tr th {\rvertical-align: top;\r}\r.dataframe thead th {\rtext-align: right;\r}\r \n\r\r0\r1\r\r\r\r\r0\rOnce again Mr. Costner has dragged out a movie...\r0\r\r\r1\rI was looking forward to this movie. Trustwort...\r0\r\r\r2\rI gave this a 3 out of a possible 10 stars.\u0026lt;br...\r0\r\r\r3\rI of course saw the previews for this at the b...\r0\r\r\r4\rtoo bad this movie isn't. While \"Nemesis Game\"...\r0\r\r\r\r\rConverting the data frames to arrays for training and testing data X_train=data_train.iloc[:,0].values\rY_train=data_train.iloc[:,1].values\r X_test=data_test.iloc[:,0].values\rY_test=data_test.iloc[:,1].values\r #print(X_train[3])\r#print(X_test[30])\r Cleaning the X_train and X_test for i in range(len(X_train)):\rX_train[i]=Clean(X_train[i])\rprint(X_train[3])\r my girlfriend once brought around the zombie chronicles for us to watch as a joke little did we realize the joke was on her for paying 1 for it while watching this film i started to come up with things i would rather be doing than watching the zombie chronicles these included br br 1 drinking bleach 2 rubbing sand in my eyes 3 writing a letter to brad sykes and garrett clancy 4 re enacting the american civil war 5 tax returns 6 gcse maths 7 sex with an old lady br br garrett clancy aka sgt ben draper wrote this the guy couldn t even dig a hole properly the best ting he did was kick a door down the best part of the film this was the worst film i have ever seen and i ve seen white noise the light never has a film had so many mistakes in it my girlfriend left it here so now i live with the shame of owning this piece of crap br br news just in owen wilson watched this film and tried to kill himself fact br br do not watch\r for i in range(len(X_test)):\rX_test[i]=Clean(X_test[i])\r#printX_test[30]\r Diving the training data into training and development data from sklearn.model_selection import train_test_split\rX_train,X_dev,Y_train,Y_dev=train_test_split(X_train,Y_train,test_size=0.2)\r#x_train[10]\r Making the vocabulary for the data\ndef build_freq_and_vocab(X):\r#vocab=set()\rvocab={}\rfor val in X:\rrevs=val.split()\rfor word in revs:\rif word not in vocab:\rvocab[word]=1\relse:\rvocab[word]+=1\rreturn(vocab)\rword_vocab=build_freq_and_vocab(X_train)\r#len(word_vocab)\r#word_vocab['idea']\rless_than_five=[]\rfor i in word_vocab.keys():\r#print(i)\rif(word_vocab[i]\u0026lt;5):\rless_than_five.append(i)\r#print(len(less_than_fove))\rfor i in less_than_five:\rdel word_vocab[i]\r#len(word_vocab) #X_train[0]\r Dispaying the vocabulary of words\nword_vocab\r {'in': 2939,\r'today': 29,\r's': 1795,\r'world': 129,\r'of': 4371,\r'digital': 5,\r'there': 550,\r'is': 3175,\r'no': 370,\r'computer': 18,\r'than': 281,\r'can': 446,\r'the': 9911,\r'actor': 90,\r'and': 4979,\r'writer': 29,\r'alas': 9,\r'this': 2326,\r'type': 39,\r'character': 222,\r'driven': 7,\r'film': 1258,\r'far': 98,\r'too': 235,\r'rare': 11,\r'these': 183,\r'days': 45,\r'duvall': 9,\r'performance': 86,\r'as': 1337,\r'well': 282,\r'james': 31,\r'earl': 19,\r'jones': 25,\r'are': 919,\r'to': 3989,\r'their': 348,\r'audience': 74,\r'high': 68,\r'expectations': 7,\r'i': 2715,\r'wonder': 31,\r'if': 494,\r'movie': 1238,\r'was': 1457,\r'made': 256,\r'for': 1322,\r'tv': 68,\r'it': 2932,\r'has': 497,\r'a': 4792,\r'close': 37,\r'up': 364,\r'personal': 25,\r'quality': 42,\r'narrative': 17,\r'an': 681,\r'say': 163,\r'that': 2191,\r'performances': 49,\r'all': 737,\r'outstanding': 12,\r'only': 369,\r'thing': 142,\r'keeps': 15,\r'from': 623,\r'being': 210,\r'cinema': 59,\r'masterpiece': 27,\r'lack': 27,\r'great': 276,\r'but': 1254,\r'pretty': 88,\r'pictures': 14,\r'not': 885,\r'everything': 74,\r'how': 268,\r'talent': 27,\r'likes': 16,\r'continue': 11,\r'produce': 10,\r'such': 157,\r'fine': 49,\r'work': 148,\r'age': 38,\r'where': 146,\r'actors': 156,\r'excellent': 71,\r'with': 1268,\r'extraordinary': 5,\r'cast': 123,\r'acting': 204,\r'very': 431,\r'disappointed': 26,\r'academy': 16,\r'when': 458,\r'didn': 143,\r't': 1029,\r'get': 265,\r'oscar': 40,\r'best': 192,\r'actress': 64,\r'goldberg': 24,\r'certainly': 32,\r'deserved': 14,\r'any': 218,\r'case': 40,\r'take': 115,\r'look': 102,\r'at': 700,\r'am': 86,\r'sure': 78,\r'you': 1025,\r'will': 270,\r'enjoy': 45,\r'much': 292,\r'films': 237,\r'fill': 10,\r'subject': 30,\r'matter': 32,\r'so': 635,\r'after': 223,\r'watching': 147,\r'trailer': 7,\r'water': 11,\r'expected': 23,\r'like': 583,\r'because': 283,\r'thought': 104,\r'd': 88,\r'on': 1058,\r'something': 131,\r'unique': 22,\r'honestly': 16,\r'portrays': 11,\r'teen': 24,\r'lesbian': 13,\r'love': 273,\r'sort': 32,\r'female': 42,\r'version': 51,\r'beautiful': 77,\r'br': 3152,\r'main': 70,\r'characters': 200,\r'young': 114,\r'french': 24,\r'women': 95,\r'15': 13,\r'years': 143,\r'old': 159,\r'marie': 17,\r'way': 240,\r'floriane': 7,\r'erotic': 8,\r'between': 111,\r'always': 85,\r'surface': 11,\r'then': 227,\r'just': 550,\r'below': 8,\r'however': 98,\r'about': 524,\r'upon': 32,\r'two': 243,\r'sexual': 28,\r'frustration': 5,\r'suffering': 13,\r'working': 34,\r'cross': 6,\r'purposes': 8,\r'least': 99,\r'sex': 63,\r'also': 274,\r'proves': 10,\r'makers': 17,\r'own': 92,\r'they': 677,\r'become': 53,\r'extra': 8,\r'features': 12,\r'lord': 6,\r'dvd': 71,\r'director': 153,\r'peter': 34,\r'says': 34,\r'cynicism': 5,\r'starts': 35,\r'meaning': 10,\r'regard': 5,\r'children': 41,\r'while': 138,\r'adults': 11,\r'part': 125,\r'maker': 6,\r'joy': 20,\r'asked': 11,\r'myself': 42,\r'yes': 43,\r'first': 274,\r'be': 850,\r'painful': 14,\r'fresh': 11,\r'life': 230,\r'positive': 18,\r'aspects': 8,\r'missing': 20,\r'balance': 7,\r'wants': 33,\r'poignant': 6,\r'celebration': 5,\r'impressed': 11,\r'her': 687,\r'ruins': 7,\r'what': 451,\r'point': 77,\r'showing': 17,\r'girl': 81,\r'nude': 9,\r'know': 179,\r'established': 5,\r'tasteful': 5,\r'nudity': 29,\r'european': 8,\r'by': 653,\r'devil': 16,\r'probably': 70,\r'little': 178,\r'heart': 41,\r'friends': 52,\r'europa': 57,\r'instance': 5,\r'see': 359,\r'make': 217,\r'show': 212,\r'unattractive': 5,\r'person': 52,\r'either': 58,\r'or': 487,\r'would': 388,\r've': 157,\r'been': 288,\r'honest': 16,\r'go': 118,\r'scene': 163,\r'club': 13,\r'dancing': 23,\r'follows': 14,\r'next': 51,\r'perhaps': 72,\r'biggest': 13,\r'honesty': 7,\r'takes': 63,\r'place': 72,\r'she': 524,\r'normal': 11,\r'asks': 13,\r'who': 654,\r'cares': 9,\r'plays': 73,\r'false': 9,\r'question': 17,\r'authentic': 10,\r'heartfelt': 5,\r'viewers': 35,\r'time': 371,\r'deserve': 16,\r'here': 160,\r'moments': 38,\r'which': 319,\r'viewer': 40,\r'1': 55,\r'since': 76,\r'do': 251,\r'people': 285,\r'wearing': 6,\r'suits': 6,\r'turtle': 8,\r'boot': 5,\r'2': 89,\r'down': 96,\r'core': 5,\r'thrown': 16,\r'garbage': 13,\r'order': 27,\r'taste': 9,\r'beloved': 5,\r'mouth': 13,\r'three': 80,\r'actresses': 32,\r'find': 129,\r'better': 159,\r'talents': 13,\r'may': 92,\r'terms': 18,\r'technique': 7,\r'could': 244,\r'have': 850,\r'successful': 17,\r'career': 30,\r'supporting': 30,\r'roles': 47,\r'leading': 20,\r'lady': 35,\r'both': 96,\r'intensity': 10,\r'future': 30,\r'play': 65,\r'emotionally': 7,\r'rise': 6,\r'disappointing': 16,\r'please': 49,\r'falling': 13,\r'necessarily': 11,\r'middle': 23,\r'aged': 9,\r'guy': 85,\r'girls': 68,\r'watch': 203,\r'identify': 9,\r'wonderful': 61,\r'new': 127,\r'crime': 27,\r'series': 101,\r'bringing': 7,\r'together': 75,\r'british': 17,\r'television': 30,\r'armstrong': 8,\r'retired': 9,\r'detectives': 9,\r'brought': 32,\r'back': 136,\r'help': 36,\r'clear': 23,\r'cases': 6,\r'under': 35,\r'younger': 16,\r'focused': 7,\r'amanda': 6,\r'quirky': 5,\r'cops': 11,\r'brilliant': 39,\r'team': 29,\r'twenty': 16,\r'year': 87,\r'police': 38,\r'force': 8,\r'moved': 20,\r'long': 105,\r'sometimes': 43,\r'effect': 39,\r'other': 284,\r'times': 92,\r'horror': 84,\r'portrayed': 21,\r'comic': 29,\r'scenes': 142,\r'some': 483,\r'moving': 31,\r'ones': 26,\r'each': 82,\r'come': 95,\r'growing': 11,\r'end': 155,\r'six': 10,\r'we': 301,\r'further': 25,\r'had': 330,\r'developed': 11,\r'cannot': 44,\r'his': 783,\r'wife': 51,\r'death': 64,\r'learning': 5,\r'accept': 11,\r'role': 94,\r'grandfather': 15,\r'even': 390,\r'helped': 9,\r'fight': 32,\r'past': 41,\r'keep': 54,\r'taking': 37,\r'face': 52,\r'familiar': 29,\r'conflict': 10,\r'having': 64,\r'story': 429,\r'lines': 49,\r'interesting': 118,\r'rather': 85,\r'heavily': 10,\r'four': 40,\r'finest': 9,\r'failure': 8,\r'box': 17,\r'office': 9,\r'b': 32,\r'demille': 11,\r'stopped': 7,\r'doing': 55,\r'non': 24,\r'american': 82,\r'history': 49,\r'were': 357,\r'our': 75,\r'jean': 20,\r'war': 62,\r'ii': 6,\r'dr': 8,\r'production': 45,\r'starring': 22,\r'gary': 9,\r'cooper': 17,\r'wild': 22,\r'bill': 26,\r'hickok': 10,\r'arthur': 14,\r'calamity': 10,\r'jane': 21,\r'buffalo': 12,\r'john': 56,\r'villain': 11,\r'usual': 20,\r'general': 26,\r'george': 43,\r'custer': 7,\r'one': 835,\r'indians': 5,\r'big': 117,\r'villains': 7,\r'led': 11,\r'charles': 10,\r'selling': 6,\r'arms': 5,\r'hall': 7,\r'jack': 15,\r'killed': 30,\r'basically': 22,\r'u': 16,\r'civil': 8,\r'lincoln': 9,\r'shown': 44,\r'start': 43,\r'talking': 22,\r'step': 10,\r'now': 144,\r'lee': 12,\r'talks': 8,\r'need': 53,\r'west': 17,\r'more': 485,\r'later': 80,\r'he': 828,\r'theater': 17,\r'april': 32,\r'must': 91,\r'busy': 24,\r'city': 24,\r'same': 133,\r'date': 16,\r'actually': 104,\r'concerned': 12,\r'immediate': 5,\r'thoughts': 6,\r'last': 93,\r'day': 99,\r'former': 20,\r'states': 7,\r'into': 260,\r'union': 7,\r'soon': 36,\r'possible': 32,\r'attention': 30,\r'except': 22,\r'problems': 25,\r'forces': 12,\r'mexico': 7,\r'against': 41,\r'involved': 25,\r'actual': 24,\r'sent': 9,\r'loser': 5,\r'second': 58,\r'put': 83,\r'serious': 40,\r'indian': 6,\r'novel': 29,\r'lake': 18,\r'jackson': 6,\r'turned': 25,\r'out': 466,\r'quite': 99,\r'effective': 14,\r'western': 28,\r'once': 78,\r'should': 160,\r'nothing': 133,\r'said': 70,\r'hardly': 19,\r'profound': 6,\r'saying': 21,\r'eat': 5,\r'good': 456,\r'breakfast': 6,\r'every': 158,\r'morning': 5,\r'your': 175,\r'health': 6,\r'statement': 7,\r'fact': 116,\r'turning': 9,\r'minor': 10,\r'ridiculous': 27,\r'typical': 25,\r'scripts': 7,\r'really': 321,\r'bad': 264,\r'errors': 5,\r'common': 20,\r'sense': 66,\r'them': 230,\r'mistake': 13,\r'adventure': 18,\r'full': 44,\r'creator': 6,\r'worth': 73,\r'political': 26,\r'ideas': 18,\r'study': 7,\r'human': 53,\r'nature': 24,\r'context': 13,\r'without': 87,\r'simply': 48,\r'everyone': 51,\r'finished': 12,\r'product': 6,\r'performers': 9,\r'worst': 86,\r'sequel': 19,\r'movies': 265,\r'again': 138,\r'doesn': 122,\r'killer': 81,\r'still': 149,\r'kills': 28,\r'fun': 57,\r'killing': 26,\r'making': 77,\r'happened': 28,\r'means': 22,\r'ever': 202,\r'don': 262,\r'value': 16,\r'hour': 33,\r'during': 67,\r'll': 86,\r'want': 104,\r'ask': 17,\r'him': 257,\r'original': 94,\r'makes': 131,\r'action': 83,\r'let': 54,\r'child': 62,\r'adult': 15,\r'impact': 6,\r'insult': 5,\r'tmnt': 7,\r'venus': 5,\r'does': 151,\r'never': 189,\r'took': 37,\r'away': 94,\r'tragic': 10,\r'tale': 29,\r'4': 47,\r'male': 23,\r'family': 91,\r'gone': 21,\r'over': 212,\r'power': 32,\r'horrible': 34,\r'episode': 34,\r'voices': 7,\r'wrong': 47,\r'acted': 21,\r'done': 100,\r'job': 95,\r'bother': 10,\r'worthy': 9,\r'material': 23,\r'slow': 34,\r'looking': 79,\r'totally': 40,\r'shredder': 6,\r'dude': 5,\r'corny': 7,\r'turtles': 6,\r'looked': 35,\r'things': 95,\r'hanging': 9,\r'off': 170,\r'bodies': 8,\r'around': 83,\r'silly': 24,\r'got': 117,\r'rid': 6,\r'stupid': 59,\r'cartoon': 8,\r'sounds': 12,\r'writing': 36,\r'those': 120,\r'kelly': 47,\r'legend': 42,\r'hoping': 12,\r'accurate': 15,\r'creative': 10,\r'license': 6,\r'taken': 44,\r'naomi': 7,\r'existed': 6,\r'reality': 38,\r'purely': 11,\r'piece': 40,\r'entertainment': 31,\r'holds': 5,\r'title': 45,\r'solid': 20,\r'ned': 57,\r'hard': 85,\r'considering': 19,\r'previous': 15,\r'mick': 5,\r'jagger': 5,\r'australian': 22,\r'rules': 5,\r'bob': 11,\r'poor': 40,\r'location': 11,\r'shooting': 43,\r'area': 12,\r'live': 37,\r'outside': 14,\r'remember': 41,\r'golden': 14,\r'released': 35,\r'critics': 10,\r'm': 147,\r'badly': 23,\r'less': 63,\r'ended': 11,\r'eddie': 10,\r'murphy': 13,\r'guess': 38,\r'going': 124,\r'gets': 97,\r'front': 20,\r'blank': 19,\r'expression': 10,\r'guys': 35,\r'enter': 9,\r'sits': 6,\r'pull': 6,\r'giant': 8,\r'cage': 12,\r'stick': 14,\r'inside': 21,\r'impression': 19,\r'michael': 29,\r'give': 109,\r'wooden': 8,\r'sequence': 20,\r'pop': 9,\r'soundtrack': 29,\r'obviously': 29,\r'might': 103,\r'cool': 27,\r'seems': 126,\r'completely': 52,\r'somewhat': 26,\r'bloody': 7,\r'opening': 31,\r'problem': 49,\r'boy': 37,\r'whole': 96,\r'mood': 7,\r'change': 24,\r'different': 52,\r'blame': 9,\r'personally': 11,\r'pointed': 6,\r'producer': 15,\r'share': 11,\r'equal': 8,\r'did': 158,\r'anyone': 91,\r'before': 126,\r'fantasy': 33,\r'martial': 11,\r'arts': 10,\r'comedy': 100,\r'crap': 22,\r'seeing': 57,\r'used': 53,\r'attend': 6,\r'e': 16,\r'almost': 94,\r'forgotten': 17,\r'me': 319,\r'my': 339,\r'wish': 30,\r'tried': 21,\r'recently': 18,\r'discovered': 11,\r'mind': 63,\r'beyond': 28,\r'understanding': 9,\r'cat': 9,\r'extremely': 34,\r'truly': 59,\r'message': 19,\r'form': 23,\r'content': 9,\r'missed': 16,\r'fan': 60,\r'wave': 9,\r'underground': 5,\r'barely': 18,\r'closing': 5,\r'credits': 21,\r'dropped': 5,\r'art': 45,\r'youth': 6,\r'documentary': 26,\r'playing': 58,\r'its': 253,\r'relationship': 31,\r'real': 159,\r'ways': 30,\r'sight': 12,\r'al': 37,\r'cliver': 8,\r'naked': 14,\r'black': 92,\r'nelson': 5,\r'laura': 19,\r'crawford': 11,\r'ursula': 5,\r'buchfellner': 8,\r'kidnapped': 9,\r'group': 24,\r'ransom': 9,\r'6': 29,\r'million': 15,\r'delivered': 8,\r'island': 21,\r'count': 15,\r'vietnam': 5,\r'hired': 7,\r'save': 28,\r'local': 8,\r'tribe': 8,\r'offer': 10,\r'monster': 11,\r'cannibal': 29,\r'god': 30,\r'eyes': 51,\r'filming': 17,\r'set': 61,\r'cannibals': 8,\r'bit': 91,\r'comes': 82,\r'thanks': 12,\r'mostly': 34,\r'hilarious': 25,\r'track': 15,\r'goofy': 5,\r'franco': 17,\r'split': 6,\r'interview': 8,\r'strong': 34,\r'including': 29,\r'whose': 29,\r'most': 244,\r'head': 47,\r'seen': 206,\r'trying': 60,\r'tons': 5,\r'gore': 23,\r'paint': 8,\r'variety': 8,\r'slowly': 15,\r'de': 17,\r'waves': 16,\r'sadly': 15,\r'jess': 6,\r'40': 12,\r'minutes': 64,\r'run': 29,\r'80': 11,\r'looks': 58,\r'nice': 57,\r'odd': 11,\r'images': 18,\r'darker': 6,\r'dialog': 20,\r'spanish': 14,\r'listen': 8,\r'gives': 51,\r'16': 6,\r'minute': 20,\r'star': 94,\r'spoilers': 26,\r'wouldn': 30,\r'hollow': 19,\r'man': 205,\r'commercial': 10,\r'paul': 24,\r'verhoeven': 25,\r'kevin': 18,\r'bacon': 32,\r'elisabeth': 5,\r'shue': 14,\r'plus': 23,\r'theme': 35,\r'invisibility': 8,\r'premise': 19,\r'unfortunately': 38,\r'week': 13,\r'suspense': 15,\r'predictable': 32,\r'bunch': 13,\r'scientists': 5,\r'animals': 8,\r'succeeded': 8,\r'decides': 18,\r'test': 8,\r'himself': 60,\r'invisible': 36,\r'changes': 12,\r'murder': 47,\r'thin': 13,\r'line': 68,\r'ill': 9,\r'suffers': 5,\r'many': 207,\r'special': 99,\r'effects': 97,\r'lead': 36,\r'producers': 17,\r'thriller': 23,\r'giving': 28,\r'damn': 8,\r'admit': 17,\r'fx': 6,\r'awesome': 13,\r'matrix': 7,\r'enough': 97,\r'directors': 17,\r'care': 39,\r'spectacular': 7,\r'few': 95,\r'perfectly': 14,\r'fabulous': 11,\r'plot': 212,\r'starship': 5,\r'troopers': 6,\r'p': 9,\r'reasons': 25,\r'why': 122,\r'joke': 19,\r'woman': 103,\r'won': 47,\r'spoil': 7,\r'moment': 30,\r'okay': 15,\r'went': 37,\r'beginning': 41,\r'die': 20,\r'course': 77,\r'dying': 5,\r'low': 52,\r'rule': 5,\r'somebody': 12,\r'alone': 36,\r'lab': 13,\r'perfect': 40,\r'victim': 15,\r'example': 42,\r'ending': 58,\r'absolutely': 51,\r'hits': 10,\r'falls': 27,\r'ground': 10,\r'leave': 22,\r'quietly': 5,\r'attacks': 5,\r'kill': 33,\r'screams': 6,\r'heard': 38,\r'explosion': 5,\r'ago': 36,\r'suddenly': 30,\r'hear': 13,\r'above': 23,\r'mr': 26,\r'supposed': 43,\r'10': 126,\r'awful': 50,\r'theory': 16,\r'directed': 23,\r'chick': 15,\r'o': 13,\r'r': 11,\r'g': 8,\r'thousand': 6,\r'picture': 67,\r'sound': 48,\r'rated': 16,\r'c': 15,\r'aren': 33,\r'negative': 9,\r'scores': 7,\r'imdb': 24,\r'com': 8,\r'rating': 22,\r'system': 12,\r'ps': 7,\r'called': 47,\r'etc': 29,\r'another': 137,\r'warning': 17,\r'following': 19,\r'superb': 22,\r'base': 6,\r'events': 20,\r'filmed': 27,\r'presumably': 5,\r'largely': 11,\r'canadian': 13,\r'crew': 21,\r'caught': 19,\r'half': 47,\r'thoroughly': 12,\r'blatant': 5,\r'historical': 37,\r'propaganda': 6,\r'susan': 6,\r'sarandon': 7,\r'assume': 6,\r'born': 8,\r'heroes': 11,\r'small': 44,\r'private': 9,\r'based': 37,\r'air': 13,\r'dislike': 6,\r'neil': 16,\r'simon': 22,\r'among': 28,\r'entertaining': 33,\r'comedies': 23,\r'watched': 60,\r'connection': 7,\r'meet': 26,\r'ah': 6,\r'afraid': 14,\r'changed': 20,\r'men': 52,\r'dull': 19,\r'stars': 54,\r'review': 17,\r'living': 41,\r'grandmother': 5,\r'walter': 32,\r'matthau': 63,\r'magnificent': 12,\r'secondly': 9,\r'burns': 62,\r'somehow': 18,\r'late': 42,\r'enjoyed': 41,\r'although': 73,\r'recognize': 9,\r'remarkable': 9,\r'top': 61,\r'laugh': 37,\r'turn': 39,\r'pleasure': 13,\r'roughly': 5,\r'knew': 31,\r'nazi': 14,\r'everybody': 24,\r'speaking': 12,\r'danish': 16,\r'decided': 21,\r'check': 40,\r...}\r Removing the words that occur less than five times\ndef occurence_less_than_five(data,occurence):\rfor i,v in enumerate(data):\rnew_vocab=[]\rfor line in v.split():\rif line in occurence.keys():\rnew_vocab.append(line)\rnew_vocab=' '.join(new_vocab)\rdata[i]=new_vocab\rreturn data\r X_train=occurence_less_than_five(X_train,word_vocab)\r #X_train[0]\rafter_remove_word_vocab=build_freq_and_vocab(X_train)\rprint(\u0026quot;Length of word vocab after removing occurence less than 5\\n\u0026quot;len(after_remove_word_vocab))\r Length of word vocab after removing occurence less than 5\r26300\r def Word_Prob(word):\rword_rev = 0\rtotal_rev = 0\rfor class_label in word:\rtotal_rev= total_rev+len(word_vocab[word]) for rev in class_label[word]:\rif word in rev:\rword_rev=+1\rprob = word_rev/total_rev return prob\r#to calculate number of documents that has a particular word\rdef word_in_doc(X,word_vocab):\rvocab_list={}\rfor word in word_vocab.keys():\rcount=0\rfor line in X:\rif word in line:\rcount+=1\rvocab_list[word]=count\rreturn vocab_list\r word_in_document=word_in_doc(X_train,word_vocab)\r#len(word_in_document)\r #P[the]=# of doc containing the/total no . of doc\rdef denom_prob_count(datab,word):\rif word not in word_in_document.keys():\rcount=0\relse:\rcount=word_in_document[word]\rreturn count/len(X_train)\r Probability(the)=no.of docs containing 'the'/total documents\ndenom=denom_prob_count(X_train,'the')\rprint(\u0026quot;P[the]=No.of documents containing 'the'/ Total number of documents\u0026quot;)\rprint(denom)\r P[the]=No.of documents containing 'the'/ Total number of documents\r0.9962546816479401\r def word_in_doc_count(X,Y,occurence,sent):\rword_pos_count={}\rword_neg_count={}\rif sent=='positive':\rfor word in occurence.keys():\rcn=0\rfor i,rev in enumerate(X):\rif word in rev.split() and Y[i]==1:\rcn+=1\rword_pos_count[word]=cn\rreturn word_pos_count\rif sent=='negative':\rfor word in occurence.keys():\rcn=0\rfor i,rev in enumerate(X):\rif word in rev.split() and Y[i]==0:\rcn+=1\rword_neg_count[word]=cn\rreturn word_neg_count\r wordneg=word_in_doc_count(X_train,Y_train,word_vocab,sent=\u0026quot;negative\u0026quot;)\rwordpos=word_in_doc_count(X_train,Y_train,word_vocab,sent=\u0026quot;positive\u0026quot;)\r #total length of positive and negative documents\rdef prob_document_length(Y_train):\rlen_pos=0\rlen_neg=0\rfor i in range(len(Y_train)):\rif(Y_train[i]==1):\rlen_pos+=1\relse:\rlen_neg+=1\rreturn(len_pos),(len_neg)\rlen_pos,len_neg=prob_document_length(Y_train)\r#print(len(Y_train))\r Finding P(the|pos) or probability or word given a sentiment\n#number of the word in positive or negative document\rdef numerat(word,sent):\rif sent=='positive':\rif word not in wordpos.keys():\rcount=0\relse:\rcount=wordpos[word]\relif sent=='negative':\rif word not in wordneg.keys():\rcount=0\relse:\rcount=wordneg[word]\rreturn count\r ##eg: P(the|positive)\rnumerator=numerat('the',sent='positive')\rprob=numerator/len_pos\rprint(prob)\r 0.9925\r Building the naive bayes model\ndef NB(X_train,Y_train,word,flag_smooth,sent):\r#naiv_prob=0\rif sent=='positive':\rnum1=(numerat(word,sent))/len_pos\rnum2=len_pos/len(Y_train)\ra=(num1*num2)\rden=denom_prob_count(X_train,word)\rden_actual=den if den!=0 else 0.001\rif flag_smooth==True:\ra_new=a+1\rd_new=den_actual\rnaiv_prob=a_new/float(d_new) else:\rnaiv_prob=a/float(den_actual) elif sent=='negative':\rnum1=(numerat(word,sent))/len_neg\rnum2=len_neg/len(Y_train)\ra=(num1*num2)\rden=denom_prob_count(X_train,word) den_actual=den if den!=0 else 0.001\rif flag_smooth==True:\ra_new=a+1\rd_new=den_actual+2\rnaiv_prob=a_new/float(d_new)\relse:\rnaiv_prob=a/float(den_actual)\r#print(naiv_prob) return naiv_prob\r #example of naive bayes\rr=NB(X_train,Y_train,'the',True,sent='positive')\rprint(r)\r 0.49916666666666665\r def NB_all(X_train,Y_train,test,flag_smooth):\rsum1=1\rsum2=1\ry_pred=[]\rfor i,v in enumerate(test):\rfor word in v.split():\rsum1=(sum1*NB(X_train,Y_train,word,flag_smooth,sent=\u0026quot;positive\u0026quot;))\rsum2=(sum2*NB(X_train,Y_train,word,flag_smooth,sent=\u0026quot;negative\u0026quot;,))\rif(sum1\u0026lt;sum2):\ry_pred.append(0)\r#print(\u0026quot;negative\u0026quot;)\relse:\ry_pred.append(1)\r#print(\u0026quot;positive\u0026quot;)\r#print(\u0026quot;sum\u0026quot;,sum1,sum2)\rreturn(y_pred)\r def accuracy_score(actual,predicted):\rcount=0\rfor i in range(len(actual)):\rif(actual[i]==predicted[i]):\rcount+=1\rreturn count/float(len(actual))\r Calculating the accuracy of the development dataset\nAs we can see we can make improvements if we tune our hyperparameters\n#print(pred)\rpred=NB_all(X_train,Y_train,X_dev,flag_smooth=False)\rscore=accuracy_score(Y_dev,pred)\rprint(\u0026quot;Accuracy of the development data set without smoothing \u0026quot;,(score*100))\r Accuracy of the development data set without smoothing 50.24875621890548\r len_pos,len_neg=prob_document_length(Y_train)\r Deriving the top ten positive words\nimport operator\rpos={}\rneg={}\r#root=[]\rfor word in word_vocab.keys():\rtop_pos=NB(X_train,Y_train,word,False,sent='positive')\rtop_neg=NB(X_train,Y_train,word,False,sent='negative')\rpos[word]=top_pos\rneg[word]=top_neg\r#Reference:https://stackoverflow.com/questions/7197315/5-maximum-values-in-a-python-dictionary\rtop_pos_10=dict(sorted(pos.items(),key=operator.itemgetter(1), reverse=True)[:10])\rtop_neg_10=dict(sorted(neg.items(),key=operator.itemgetter(1), reverse=False)[:10])\r print(\u0026quot;top 10 positive words::\u0026quot;)\rfor word in top_pos_10.keys():\rprint(word)\r top 10 positive words::\rcuster\rtsui\rdepicted\rgeorgia\rpatricia\rplots\rwilly\ralicia\rresort\rreligion\r print(\u0026quot;top 10 negative words::\u0026quot;)\rfor word in top_neg_10.keys():\rprint(word)\r top 10 negative words::\rgoldberg\rretired\rfinest\rdemille\rii\rcuster\rlincoln\rbusy\rimmediate\rattend\r Comparing the effects of smoothing\nConsidering the optimal hyperparameter , smoothing increases the accuracy of our model\npred=NB_all(X_train,Y_train,X_test,flag_smooth=False)\rscore=accuracy_score(Y_test,pred)\r#pred=NB_all(X_train,Y_train,X_train,flag_smooth=True)\r#score=accuracy_score(Y_train,pred)\rprint(score*100)\r 57.496\r Using the test dataset\npred=NB_all(X_train,Y_train,X_test,flag_smooth=True)\rscore=accuracy_score(Y_train,pred)\r#pred=NB_all(X_train,Y_train,X_test,flag_smooth=False)\r#score=accuracy_score(Y_test,pred)\rprint(\u0026quot;Probabiity of the dataset after optimal hyperparameters and smoothing \\n\u0026quot;,score*100)\r Probabiity of the test dataset after optimal hyperparameters and smoothing\r64.763\r We have seen that Naive Bayes can be used extensively for text categorization and solving the problem or whether a document belongs to one sentiment or another.Some problems faced during the implemetation of this assignment were targeting a large dataset.\nWe can see that the smoothing increases the accuracy slightly and we can compile a better probabilistic model if smoothing(eg.Laplace) is done.To further improve accuracy we can use some tactics like vectorisation or lemmatizing our words.Naive Bayes as a whole certainly aids to classify a text dataset in those aspects\nReferences: https://towardsdatascience.com/unfolding-na%C3%AFve-bayes-from-scratch-2e86dcae4b01#08ef\nhttps://machinelearningmastery.com/naive-bayes-classifier-scratch-python/\nhttps://machinelearningmastery.com/load-machine-learning-data-scratch-python/\nhttps://machinelearningmastery.com/implement-resampling-methods-scratch-python/\n ","date":1587427200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587427200,"objectID":"18f6d18b23a645f93c26a244a8c99944","permalink":"https://sushantmhambrey.github.io/post/assn3/","publishdate":"2020-04-21T00:00:00Z","relpermalink":"/post/assn3/","section":"post","summary":"IMPLEMENTING NAIVE BAYES FROM SCRATCH USING MOVIE REVIEW DATASET\nNaive Bayes is one of the most common ML algorithms that is often used for the purpose of text classification. If you have just stepped into ML, it is one of the easiest classification algorithms to start with. Naive Bayes is a probabilistic classification algorithm as it uses probability to make predictions for the purpose of classification.\nImporting the necessary libraries","tags":null,"title":"Naive Bayes from Scratch","type":"post"},{"authors":[],"categories":[],"content":"","date":1583835578,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1583489978,"objectID":"5331ef7925d4e42203f8c3e4ab77783f","permalink":"https://sushantmhambrey.github.io/project/nlp/","publishdate":"2020-03-10T04:19:38-06:00","relpermalink":"/project/nlp/","section":"project","summary":"real or fake tweet detection from a handpicked dataset of 150000 tweets using the concepts of natural languauge processing.","tags":[],"title":"NLP","type":"project"},{"authors":null,"categories":null,"content":"Importing the necessary libraries\nimport numpy as np import pandas as pd import os\rimport seaborn as sns\rimport string\rimport csv\rfrom sklearn.feature_extraction.text import CountVectorizer\rfrom sklearn import linear_model\rfrom sklearn.naive_bayes import MultinomialNB\rfrom sklearn.metrics import confusion_matrix\rfrom sklearn.metrics import accuracy_score\r Loading the training and test data using pandas library\nfrom sklearn.model_selection import train_test_split\rtrain = pd.read_csv('../input/nlp-getting-started/train.csv')\rtest = pd.read_csv('../input/nlp-getting-started/test.csv')\rsubmit = pd.read_csv(\u0026quot;/kaggle/input/nlp-getting-started/sample_submission.csv\u0026quot;)\r Reading the first five values of the training dataset\ntrain.head()\r \r.dataframe tbody tr th:only-of-type {\rvertical-align: middle;\r}\r.dataframe tbody tr th {\rvertical-align: top;\r}\r.dataframe thead th {\rtext-align: right;\r}\r \n\r\rid\rkeyword\rlocation\rtext\rtarget\r\r\r\r\r0\r1\rNaN\rNaN\rOur Deeds are the Reason of this #earthquake M...\r1\r\r\r1\r4\rNaN\rNaN\rForest fire near La Ronge Sask. Canada\r1\r\r\r2\r5\rNaN\rNaN\rAll residents asked to 'shelter in place' are ...\r1\r\r\r3\r6\rNaN\rNaN\r13,000 people receive #wildfires evacuation or...\r1\r\r\r4\r7\rNaN\rNaN\rJust got sent this photo from Ruby #Alaska as ...\r1\r\r\r\r\rprint (train.shape, test.shape, submit.shape)\r (7613, 5) (3263, 4) (3263, 2)\r Looking at the count of the null values\nprint(train.isnull().sum())\rprint(test.isnull().sum())\r id 0\rkeyword 61\rlocation 2533\rtext 0\rtarget 0\rdtype: int64\rid 0\rkeyword 26\rlocation 1105\rtext 0\rdtype: int64\r import matplotlib.pyplot as plt\rsns.countplot(y=train.target)\r \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7fbc0ccb6cc0\u0026gt;\r Looking at some examples of training before cleaning the text\ntrain['text']\r 0 Our Deeds are the Reason of this #earthquake M...\r1 Forest fire near La Ronge Sask. Canada\r2 All residents asked to 'shelter in place' are ...\r3 13,000 people receive #wildfires evacuation or...\r4 Just got sent this photo from Ruby #Alaska as ...\r... 7608 Two giant cranes holding a bridge collapse int...\r7609 @aria_ahrary @TheTawniest The out of control w...\r7610 M1.94 [01:04 UTC]?5km S of Volcano Hawaii. htt...\r7611 Police investigating after an e-bike collided ...\r7612 The Latest: More Homes Razed by Northern Calif...\rName: text, Length: 7613, dtype: object\r Defining a function to clean the dataset\nimport re\rdef clean(text):\rtext=re.sub(r'https?://\\S+', '', text)\rtext=re.sub(r'\u0026lt;.*?\u0026gt;','',text) text=re.sub(r'\\n',' ', text)\rtext=re.sub('\\s+', ' ', text).strip()\rreturn text\r train['text'] = train['text'].apply(lambda x : clean(x))\r Looking at the examples after cleaning the dataset\ntrain['text']\r 0 Our Deeds are the Reason of this #earthquake M...\r1 Forest fire near La Ronge Sask. Canada\r2 All residents asked to 'shelter in place' are ...\r3 13,000 people receive #wildfires evacuation or...\r4 Just got sent this photo from Ruby #Alaska as ...\r... 7608 Two giant cranes holding a bridge collapse int...\r7609 @aria_ahrary @TheTawniest The out of control w...\r7610 M1.94 [01:04 UTC]?5km S of Volcano Hawaii.\r7611 Police investigating after an e-bike collided ...\r7612 The Latest: More Homes Razed by Northern Calif...\rName: text, Length: 7613, dtype: object\r def remove_emoji(text):\remoji_pattern = re.compile(\u0026quot;[\u0026quot;\ru\u0026quot;\\U0001F600-\\U0001F64F\u0026quot; # emoticons\ru\u0026quot;\\U0001F300-\\U0001F5FF\u0026quot; # symbols \u0026amp; pictographs\ru\u0026quot;\\U0001F680-\\U0001F6FF\u0026quot; # transport \u0026amp; map symbols\ru\u0026quot;\\U0001F1E0-\\U0001F1FF\u0026quot; # flags (iOS)\ru\u0026quot;\\U00002702-\\U000027B0\u0026quot;\ru\u0026quot;\\U000024C2-\\U0001F251\u0026quot;\r\u0026quot;]+\u0026quot;, flags=re.UNICODE)\rreturn emoji_pattern.sub(r'', text)\rtrain['text'] = train['text'].apply(lambda x: remove_emoji(x))\r# Reference : https://gist.github.com/slowkow/7a7f61f495e3dbb7e3d767f97bd7304b\r train['text']\r 0 Our Deeds are the Reason of this #earthquake M...\r1 Forest fire near La Ronge Sask. Canada\r2 All residents asked to 'shelter in place' are ...\r3 13,000 people receive #wildfires evacuation or...\r4 Just got sent this photo from Ruby #Alaska as ...\r... 7608 Two giant cranes holding a bridge collapse int...\r7609 @aria_ahrary @TheTawniest The out of control w...\r7610 M1.94 [01:04 UTC]?5km S of Volcano Hawaii.\r7611 Police investigating after an e-bike collided ...\r7612 The Latest: More Homes Razed by Northern Calif...\rName: text, Length: 7613, dtype: object\r def remove_punct(text):\rtable=str.maketrans('','',string.punctuation)\rreturn text.translate(table)\r#train_data['text'] = train_data['text'].apply(lambda x : remove_punct(x)\r Assigning x to our text and y to our target column\nSplitting the training and testing dataset/\nx = train[\u0026quot;text\u0026quot;]\ry = train[\u0026quot;target\u0026quot;]\rX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\r We need to vectorize the training dataset examples\nvectorize = CountVectorizer(stop_words = 'english')\rx_vector_train = vectorize.fit_transform(X_train)\rx_vector_test = vectorize.transform(X_test)\r Our first model is the multinomial Naive Bayes model. Using the fit and predict methods and calculating the accuracy\nmodel = MultinomialNB()\rmodel.fit(x_vector_train, y_train)\rprediction = model.predict(x_test_cv)\racc=accuracy_score(y_test,prediction)\rprint(acc)\r 0.7892317793827971\r We will test one more model called as Ridge Classifier and printing the accuracy\nclf = linear_model.RidgeClassifier()\rclf.fit(x_vector_train, y_train)\rprediction1=clf.predict(x_test_cv)\racc1=accuracy_score(y_test,prediction1)\rprint(acc1)\r 0.768220617202889\r As we can see Multinomial Naive Bayes model performs a little better than Naive Bayes model by almost 2 percentage. Thus we will use that model to make our submission file\n#predicting on the test values\rx_test=test[\u0026quot;text\u0026quot;]\r#vectorizing the data\rx_test_vector=vectorize.transform(x_test)\r#making predictions\rprediction=model.predict(x_test_vector)\r#making submission\rsubmit[\u0026quot;target\u0026quot;]=prediction\rprint(submit.head(10))\r  id target\r0 0 1\r1 2 1\r2 3 1\r3 9 1\r4 11 1\r5 12 1\r6 21 0\r7 22 0\r8 27 0\r9 29 0\r submit.to_csv(\u0026quot;submission.csv\u0026quot;,index=False)\r  ","date":1581292800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1581292800,"objectID":"1d92526beef2c467e2fa54be5d4f7a77","permalink":"https://sushantmhambrey.github.io/post/twitter/","publishdate":"2020-02-10T00:00:00Z","relpermalink":"/post/twitter/","section":"post","summary":"Importing the necessary libraries\nimport numpy as np import pandas as pd import os\rimport seaborn as sns\rimport string\rimport csv\rfrom sklearn.feature_extraction.text import CountVectorizer\rfrom sklearn import linear_model\rfrom sklearn.naive_bayes import MultinomialNB\rfrom sklearn.metrics import confusion_matrix\rfrom sklearn.metrics import accuracy_score\r Loading the training and test data using pandas library\nfrom sklearn.model_selection import train_test_split\rtrain = pd.read_csv('../input/nlp-getting-started/train.csv')\rtest = pd.read_csv('../input/nlp-getting-started/test.csv')\rsubmit = pd.read_csv(\u0026quot;/kaggle/input/nlp-getting-started/sample_submission.csv\u0026quot;)\r Reading the first five values of the training dataset","tags":null,"title":"Twitter Real or Not prediction","type":"post"},{"authors":[],"categories":[],"content":"","date":1580360449,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580360449,"objectID":"9785e6cbb2b1405c01e51871f2357d05","permalink":"https://sushantmhambrey.github.io/project/pipe/","publishdate":"2020-01-29T23:00:49-06:00","relpermalink":"/project/pipe/","section":"project","summary":"Implemented a simple data pipeline to count the number of visitors on a website each day","tags":[],"title":"Data Pipeline ","type":"project"},{"authors":[],"categories":[],"content":"","date":1580360439,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580360439,"objectID":"1e1448d2639e1b7b7d45f78ea9644207","permalink":"https://sushantmhambrey.github.io/project/be/","publishdate":"2020-01-29T23:00:39-06:00","relpermalink":"/project/be/","section":"project","summary":"Implemented a project to virtually try footwear through a mobile application. Created AR models for shoes using Vuforia and Unity3d. Used YOLO algorithm to train image dataset","tags":[],"title":"Virtual Shoe Trial","type":"project"},{"authors":[],"categories":[],"content":"","date":1580360432,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580360432,"objectID":"a6d8e05c0c4b41be700bae6f8cb99b68","permalink":"https://sushantmhambrey.github.io/project/damt/","publishdate":"2020-01-29T23:00:32-06:00","relpermalink":"/project/damt/","section":"project","summary":"Implemented a project based on the probability distribution and their distribution functions .Simulated and analyzed various discrete and continuous probability distributions using Python3.  ","tags":[],"title":"Simulation of Random Variables","type":"project"},{"authors":[],"categories":[],"content":"","date":1580358031,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580358031,"objectID":"957a80445972d2e6a8474d2b53cd2a01","permalink":"https://sushantmhambrey.github.io/project/ai/","publishdate":"2020-01-29T22:20:31-06:00","relpermalink":"/project/ai/","section":"project","summary":"Implemented an AI program using Python3 to play Connect4 interactively based on a MinMax strategy. Evaluated board states to make an optimal decision for the next move ","tags":[],"title":"Connect4 board game ","type":"project"},{"authors":null,"categories":null,"content":"Introduction to kNN\nThe K-nearest-neighbor (kNN) is one of the most important and simple methods which can be used for both classification and regression problems but is more widely preferred in classification. Although it is simplistic in nature, the KNN algorithm can have better performance levels than many other classifiers’ is usually referred to as a “lazy, non parametric” learning algorithm. A non-parametric technique usually means that it does not assume anything about the data distribution. The structure of the model is defined by the data which is very advantageous when viewed from real world perspective. For these reasons , the rudimentary kNN algorithm can be considered as a good starting point for classification problems containing little or no prior knowledge about distribution data.\rOne of the most important test cases of kNN can be determining similarity of documents(sometimes referred to as “Concept Search”).Though kNN is easy to use and understand it has its own downfalls.As compared to neural network or SVM , kNN performs really slowly and can sometimes be less accurate.\nThe kNN working is really simple. There is minimal training and heavy testing involved. When we need to make a prediction, the k-most similar neighbors are located and an equivalent prediction is made. It is like forming a “majority vote” between the k most similar instances to a new unobserved instance. Similarity is the distance metric between two data points. There are a number of distance measures available each with better accuracy than other depending on the given use cases and the hyperparameter selections. Usually a good starting point of distance measure in case of tabular data is the “Euclidian distance”\nExporting the necessary libraries\nimport numpy as np import pandas as pd\rimport seaborn as sns\rfrom collections import Counter\r The assignment is about leveraging kNN in Python on a simple classification problem.The dataset at hand is the “Iris Flower Dataset(IFD)” taken from UC Irvine Machine Learning Repository. The set has 3 Iris species((Iris setosa, Iris virginica and Iris versicolor) each having 50 observations. We have 4 features(attributes): 2 length(sepal_length,petal_length) and 2 width(sepal_width,petal_width)\niris = pd.read_csv(\u0026quot;iris.csv\u0026quot;)\r Observing the data. Iris dataset consists of four features and one class attribute\niris.head()\r \r.dataframe tbody tr th:only-of-type {\rvertical-align: middle;\r}\r.dataframe tbody tr th {\rvertical-align: top;\r}\r.dataframe thead th {\rtext-align: right;\r}\r \n\r\rsepal_length\rsepal_width\rpetal_length\rpetal_width\rclass\r\r\r\r\r0\r5.1\r3.5\r1.4\r0.2\rIris-setosa\r\r\r1\r4.9\r3.0\r1.4\r0.2\rIris-setosa\r\r\r2\r4.7\r3.2\r1.3\r0.2\rIris-setosa\r\r\r3\r4.6\r3.1\r1.5\r0.2\rIris-setosa\r\r\r4\r5.0\r3.6\r1.4\r0.2\rIris-setosa\r\r\r\r\riris.describe()\r \r.dataframe tbody tr th:only-of-type {\rvertical-align: middle;\r}\r.dataframe tbody tr th {\rvertical-align: top;\r}\r.dataframe thead th {\rtext-align: right;\r}\r \n\r\rsepal_length\rsepal_width\rpetal_length\rpetal_width\r\r\r\r\rcount\r150.000000\r150.000000\r150.000000\r150.000000\r\r\rmean\r5.843333\r3.054000\r3.758667\r1.198667\r\r\rstd\r0.828066\r0.433594\r1.764420\r0.763161\r\r\rmin\r4.300000\r2.000000\r1.000000\r0.100000\r\r\r25%\r5.100000\r2.800000\r1.600000\r0.300000\r\r\r50%\r5.800000\r3.000000\r4.350000\r1.300000\r\r\r75%\r6.400000\r3.300000\r5.100000\r1.800000\r\r\rmax\r7.900000\r4.400000\r6.900000\r2.500000\r\r\r\r\rAnalysing the data and plotting various iris classes in swarmplot.\nFrom the plot it can be observed that iris setosa has the least length range while virginica has the longest range\nsns.swarmplot(x='class',y='sepal_length',data=iris)\r \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x16d2639ac88\u0026gt;\r iris.groupby('class').size()\r class\rIris-setosa 50\rIris-versicolor 50\rIris-virginica 50\rdtype: int64\r from sklearn.preprocessing import LabelEncoder\rfeature_columns = ['sepal_length', 'sepal_width', 'petal_length','petal_width']\rX = np.array(iris[feature_columns])\ry = np.array(iris['class'])\rnp.size(y)\r 150\r The last column of the dataset represents the class values of the corresponding data.We need to convert this into integer for prediction\nlast_column= LabelEncoder()\ry = last_column.fit_transform(y)\ry\rfrom sklearn.model_selection import train_test_split\r We can observe that the classes are assigned integer values respectively. Example:: Iris-Setosa becomes 0, Versicolor becomes 1 and Virginica becomes 2 X_dev, X_test, y_dev, y_test = train_test_split(X, y, test_size = 0.35)\r Writing kNN fit from scratch Here is where we implement the actual magic. In a nutshell , a particular row is measure against the rest of the development set and a majority vote is returned.As we have seen earlier kNN is a Lazy algorithm , it doesnt require an implementation of a train function--which is just learning the data.\nfrom numpy import dot\rfrom numpy.linalg import norm\r#----------EUCLIDIAN DISTANCE------------------------\rdef My_knn_fit(X_dev, y_dev, x_test, k,measure):\rif(measure==\u0026quot;euc\u0026quot;):\rdist_euc = []\rclass_output = []\rfor i in range(len(X_dev)):\rdist_euc.append([np.sqrt(np.sum(np.square(x_test - X_dev[i, :]))),i])\rdist_euc_sort = sorted(dist_euc)\rfor i in range(k):\rclass_in = dist_euc_sort[i][1]\rclass_output.append(y_dev[class_in])\rmajority_vote=Counter(class_output).most_common(1)[0][0]\rreturn majority_vote\r#------------COSINE DISTANCE--------------------------- elif(measure==\u0026quot;cosine\u0026quot;):\rdist_cos = []\rclass_output = []\rfor i in range(len(X_dev)):\rcos_sim = np.sum((dot(x_test,X_dev[i, :]))/(norm(X_dev[i, :])*norm(x_test)))\rcos_dis=(1-cos_sim)\rdist_cos.append([(cos_dis),i])\rdist_cos_sort = sorted(dist_cos)\rfor i in range(k):\rclass_in = dist_cos_sort[i][1]\rclass_output.append(y_dev[class_in])\rmajority_vote=Counter(class_output).most_common(1)[0][0] return majority_vote\r#------------NORMALIZED-EUCLIDIAN DISTANCE-------------\relif(measure==\u0026quot;norm_euc\u0026quot;): #0.5*var(X-Y)/var(x)-var(y)\rdist_norm = []\rclass_output = []\rfor i in range(len(X_dev)):\rdist_norm.append([np.sum((np.var(X_dev[i, :]-x_test)/(np.var(X_dev[i,:]-np.var(x_test))))),i])\rdist_norm_sort = sorted(dist_norm)\rfor i in range(k):\rclass_in = dist_norm_sort[i][1]\rclass_output.append(y_dev[class_in])\rmajority_vote=Counter(class_output).most_common(1)[0][0] return majority_vote\r Implementing kNN predict function def My_KNN_predict(X_dev, y_dev, X_test, k):\rpred_euc = []\rpred_cosine=[]\rpred_norm=[]\rfor i in range(len(X_test)):\rpred_euc.append(My_knn_fit(X_dev, y_dev, X_test[i, :], k,\u0026quot;euc\u0026quot;))\rpred_cosine.append(My_knn_fit(X_dev, y_dev, X_test[i, :], k,\u0026quot;cosine\u0026quot;))\rpred_norm.append(My_knn_fit(X_dev, y_dev, X_test[i, :], k,\u0026quot;norm_euc\u0026quot;))\rpred_euc=np.array(pred_euc)\rpred_cosine=np.array(pred_cosine)\rpred_norm=np.array(pred_norm)\r#print(\u0026quot;cos:\u0026quot;,pred_cosine)\r#print(\u0026quot;norm:\u0026quot;,pred_norm)\rreturn (pred_euc,pred_cosine,pred_norm)\r  Let's try out a random input taken from the csv file to see if the predcition is done correctly.The random input taken belong to setosa which corresponds to class 0 ran=[5.1,3.5,1.4,0.2]\rpredin=My_knn_fit(X_dev,y_dev,ran,5,\u0026quot;euc\u0026quot;)\rif(predin==0):\rprint(\u0026quot;iris-setosa\u0026quot;)\relif(predin==1):\rprint(\u0026quot;iris-versicolor\u0026quot;)\relse:\rprint(\u0026quot;iris-virginica\u0026quot;)\r iris-setosa\r def accuracy_scor(y_test, prediction):\rcorrect = 0\rn = len(y_test)\rfor i in range(n):\rif(y_test[i]==prediction[i]):\rcorrect+=1\raccuracy_sc = (correct*100)/n\rreturn accuracy_sc\racc_cosine=[]\racc_euc=[]\racc_norm=[]\rfor k in range(1,8,2):\rpred_euc,pred_cosine,pred_norm = My_KNN_predict(X_dev, y_dev, X_test,k)\r# evaluating accuracy\raccuracy1 = accuracy_scor(y_test, pred_euc)\racc_euc.append(accuracy1)\raccuracy2=accuracy_scor(y_test, pred_cosine)\racc_cosine.append(accuracy2)\raccuracy3=accuracy_scor(y_test, pred_norm)\racc_norm.append(accuracy3)\rprint(\u0026quot;Euclidian accuracy:\u0026quot;,(acc_euc))\rprint(\u0026quot;Cosine accuracy:\u0026quot;,(acc_cosine))\rprint(\u0026quot;Normalised-Euclidian:\u0026quot;,(acc_norm))\r Euclidian accuracy: [94.33962264150944, 94.33962264150944, 96.22641509433963, 96.22641509433963]\rCosine accuracy: [92.45283018867924, 96.22641509433963, 98.11320754716981, 98.11320754716981]\rNormalised-Euclidian: [96.22641509433963, 98.11320754716981, 98.11320754716981, 98.11320754716981]\r k=[1,3,5,7]\rsns.set(style=\u0026quot;whitegrid\u0026quot;)\rax=sns.barplot(x=k, y=acc_euc, data=iris)\rax.set(ylim=(85, 100))\rax.set(xlabel='K-value', ylabel='Accuracy(Euclidian)')\r [Text(0, 0.5, 'Accuracy(Euclidian)'), Text(0.5, 0, 'K-value')]\r k=[1,3,5,7]\rsns.set(style=\u0026quot;whitegrid\u0026quot;)\rax=sns.barplot(x=k, y=acc_cosine, data=iris)\rax.set(ylim=(85,100))\rax.set(xlabel='K-value', ylabel='Accuracy(Cosine)')\r [Text(0, 0.5, 'Accuracy(Cosine)'), Text(0.5, 0, 'K-value')]\r k=[1,3,5,7]\rsns.set(style=\u0026quot;whitegrid\u0026quot;)\rax=sns.barplot(x=k, y=acc_cosine, data=iris)\rax.set(ylim=(85,100))\rax.set(xlabel='K-value', ylabel='Accuracy(Normalized Euclidian)')\r [Text(0, 0.5, 'Accuracy(Normalized Euclidian)'), Text(0.5, 0, 'K-value')]\r We see the various accuracies we get on euclidian , cosine and normalised euclidian distances with the various k values of 1,3,5,7.Let's see what happens when we run the fit and predict on hyperparameter K value from 1 to 20\nacc_cosine1=[]\racc_euc1=[]\racc_norm1=[]\rfor k in range(1,20,1):\rpred_euc,pred_cosine,pred_norm = My_KNN_predict(X_dev, y_dev, X_test,k)\r# evaluating accuracy\raccuracy1 = accuracy_scor(y_test, pred_euc)\racc_euc1.append(accuracy1)\raccuracy2=accuracy_scor(y_test, pred_cosine)\racc_cosine1.append(accuracy2)\raccuracy3=accuracy_scor(y_test, pred_norm)\racc_norm1.append(accuracy3)\rprint(\u0026quot;Euclidian accuracy:\u0026quot;,max(acc_euc1),acc_euc1.index(max(acc_euc1))+1)\rprint(\u0026quot;Cosine accuracy:\u0026quot;,max(acc_cosine1),acc_cosine1.index(max(acc_cosine1))+1)\rprint(\u0026quot;Normalised-Euclidian:\u0026quot;,max(acc_norm1),acc_norm1.index(max(acc_norm1))+1)\r Euclidian accuracy: 100.0 7\rCosine accuracy: 100.0 1\rNormalised-Euclidian: 100.0 4\r We can see that considering the given parameters we get optimal values at k=5 for cosine similarity and if we iterate over values of k on 1 to 20 we get perfect scores which maybe due to perfectly labelled data or sometimes overfitting.\rdef My_KNN_predict_test(X_dev, y_dev, X_test, k):\rpred_cosine=[]\rfor i in range(len(X_test)):\rpred_cosine.append(My_knn_fit(X_dev, y_dev, X_test[i, :], k,\u0026quot;cosine\u0026quot;))\rpred_cosine=np.array(pred_cosine)\r#print(\u0026quot;cos:\u0026quot;,pred_cosine)\r#print(\u0026quot;norm:\u0026quot;,pred_norm)\rreturn (pred_euc,pred_cosine,pred_norm)\rprint(\u0026quot;Final accuracy of the optimal hyperparameter wrt to test set:\u0026quot;,acc_cosine[2])\rdef My_knn_fit_test(X_dev, y_dev, x_test, k,measure):\rif(measure==\u0026quot;cosine\u0026quot;):\rdist_cos = []\rclass_output = []\rfor i in range(len(X_dev)):\rcos_sim = np.sum((dot(x_test,X_dev[i, :]))/(norm(X_dev[i, :])*norm(x_test)))\rcos_dis=(1-cos_sim)\rdist_cos.append([(cos_dis),i])\rdist_cos_sort = sorted(dist_cos)\rfor i in range(k):\rclass_in = dist_cos_sort[i][1]\rclass_output.append(y_dev[class_in])\rmajority_vote=Counter(class_output).most_common(1)[0][0] return majority_vote\r Final accuracy of the optimal hyperparameter wrt to test set: 98.11320754716981\r As we can already see , one of the most advantageous features of kNN apart from being simple and easy to understand is that requires minimal to no training time and serves as a good starting point in learning algorithms.We also saw that though \"COSINE SIMILARITY WITH A HYPERPARAMTER OF 5\" performed the best with an almost perfect accuracy , it took a lot of time to process as might have compared to other algorithms.Some of the improvements that can be done are using other distance metrics to measure perfomance or using dimensionality reduction techniques depending on the dataset.\n ","date":1567296000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1567296000,"objectID":"3d230d6f6427eb876a194b8e445d3a8b","permalink":"https://sushantmhambrey.github.io/post/assn2/","publishdate":"2019-09-01T00:00:00Z","relpermalink":"/post/assn2/","section":"post","summary":"Introduction to kNN\nThe K-nearest-neighbor (kNN) is one of the most important and simple methods which can be used for both classification and regression problems but is more widely preferred in classification. Although it is simplistic in nature, the KNN algorithm can have better performance levels than many other classifiers’ is usually referred to as a “lazy, non parametric” learning algorithm. A non-parametric technique usually means that it does not assume anything about the data distribution.","tags":null,"title":"Implementing kNN from scratch on IRIS dataset","type":"post"},{"authors":null,"categories":null,"content":"We know that even though linear models can provide good training models rudimentarily, there are lots of situations where the variables don\u0026rsquo;t reveal a linear relationship. Thus we need to create polynomial models for such datasets.One major issue with polynomial models is that they are suspectible to overfitting.In this article we will look at how a higher degree polynomial model overfits a dataset to create a perfect training environment as opposed to it\u0026rsquo;s errors introduced while testing on the same degree.We will further look at how regularization helps to tackel overfitting and what values of hyperparameters produce the best results.\nImporting the necessary libraries\nimport math\rimport pandas as pd\rimport operator\rimport numpy as np\rfrom sklearn.model_selection import train_test_split\rimport matplotlib.pyplot as plt\rfrom sklearn.metrics import mean_squared_error\rfrom sklearn.linear_model import LinearRegression\rfrom sklearn.linear_model import Ridge\rfrom sklearn.preprocessing import PolynomialFeatures\r#from sklearn.linear_model import Lasso\r#from sklearn.linear_model import ElasticNet\rfrom sklearn.pipeline import make_pipeline\rfrom sklearn.pipeline import Pipeline\rfrom sklearn.preprocessing import StandardScaler\r Creating X,Y data pairs.Here x is sampled from a uniform distribution and N from a gaussian normal distribution\n#we can change the seed value to get different randome numbers for our x,N values\rnp.random.seed(45)\rx=np.random.uniform(low=0,high=1,size=20)\rmu=0\rsigma=1\r#N is based on a gaussian normal distribution\rN=np.random.normal(mu,sigma,size=20)\ry=(np.sin(2*np.pi*x))+N\r #splitting the dataset into 10 for training and 10 for testing\rx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.5)\rx_train\r array([0.97600332, 0.62739168, 0.44053089, 0.99072168, 0.16332445,\r0.07728957, 0.28266721, 0.673068 , 0.47280797, 0.048522 ])\r #a reference true fit graph to see how our data fits with different polynomial degrees\rx_rn=np.linspace(0,1,100)\ry_rn=(np.sin(2*np.pi*x_rn))\rplt.scatter(x_train,y_train,s=10,color=\u0026quot;red\u0026quot;)\rplt.plot(x_rn,y_rn)\rplt.show()\r Making the graphs for fit data with the specific degrees ranging from 0 to 9 We can observe that as we increase the degree of our polynomial regression model , the graph tends to cover all the datapoints leading to overfitting from sklearn.pipeline import make_pipeline\r#x = np.sort(x_train[:])\r#y=np.sort(y_train[:])\rtrain_error=[]\rtest_error=[] for i in range(10):\rplt.title('Degree %d' %i)\rplt.text(0.7, .55, 'M=%d' %i)\rX = x_train[:, np.newaxis]\rY = y_train[:, np.newaxis]\rX1 = x_test[:,np.newaxis]\rY1 = y_test[:,np.newaxis]\r#we first make use of the linearregression model to observe how it overfits at higher degrees.\rmodel = make_pipeline(PolynomialFeatures(i), LinearRegression())\rmodel.fit(X,Y)\ry_pred = model.predict(X)\rmse = (mean_squared_error(Y,y_pred))\rrmse=math.sqrt(mse)\rtrain_error.append(rmse)\ry_test_pred=model.predict(X1)\rmse_test= (mean_squared_error(Y1,y_test_pred))\rrmse_test=math.sqrt(mse_test)\rtest_error.append(rmse_test)\r#sorting\rlists=sorted(zip(*[X,y_pred]))\rX,y_pred = list(zip(*lists))\r#plotting the models at various degrees.\rplt.scatter(x_train, y_train,color='black',label='data points')\rplt.plot(X, y_pred, color='g',label='degree_fit')\rplt.plot(x_rn,y_rn,color='r',label='true_fit')\rplt.legend(loc=\u0026quot;lower left\u0026quot;)\r_=plt.xlabel(\u0026quot;X--\u0026gt;\u0026quot;)\r_=plt.ylabel(\u0026quot;t--\u0026gt;\u0026quot;)\rplt.show()\r Plotting training vs test error\rplt.plot(train_error,label='train error')\rplt.plot(test_error,label='test error')\rplt.xticks(np.arange(0, 10, 1.0))\rplt.legend(loc=\u0026quot;upper left\u0026quot;)\r_=plt.xlabel(\u0026quot;M\u0026quot;)\r_=plt.ylabel(\u0026quot;E(RMS)\u0026quot;)\rplt.show()\r Generating 100 data points and fitting ninth order model on it #creating 100 data points\rnp.random.seed(10)\rx2=np.random.uniform(low=0,high=1,size=100)\rmu=0\rsigma=1\rN2=np.random.normal(mu,sigma,size=100)\ry2=(np.sin(2*np.pi*x2))+N2\r x_train100, x_test100, y_train100, y_test100 = train_test_split(x2, y2, test_size=0.01)\r X100 = x_train100[:, np.newaxis]\rY100 = y_train100[:, np.newaxis]\rmodel = make_pipeline(PolynomialFeatures(9), LinearRegression())\r#fitting the 100 data points of the ninth order model.\rmodel.fit(X100,Y100)\ry_pred100 = model.predict(X100)\r#sorting\rlists=sorted(zip(*[X100,y_pred100]))\rX100,y_pred100 = list(zip(*lists))\rplt.scatter(x_train100, y_train100,color='#3299a8',label='data points')\rplt.plot(X100, y_pred100, color='r',label='model fit')\rplt.plot(x_rn,y_rn,color='b',label='true fit')\rplt.legend(loc=\u0026quot;lower left\u0026quot;)\r_=plt.xlabel(\u0026quot;X--\u0026gt;\u0026quot;)\r_=plt.ylabel(\u0026quot;Y--\u0026gt;\u0026quot;)\rplt.show()\r Regularisation and graph creation for different values of lambda\nlbd=[1, 1/10, 1/100, 1/1000, 1/10000, 1/100000]\rplt.ylim(-2,2)\rtrain_error2=[]\rtest_error2=[]\rfor i in range(6):\rmodel1= make_pipeline(StandardScaler(),PolynomialFeatures(degree=9), Ridge(alpha=lbd[i],fit_intercept=True))\rmodel1.fit(X,Y)\ry_pred2 = model1.predict(X)\rmse2 = (mean_squared_error(Y,y_pred2))\rrmse2=math.sqrt(mse2)\rtrain_error2.append(rmse2)\ry_test_pred2=model1.predict(X1)\rmse_test2= (mean_squared_error(Y1,y_test_pred2))\rrmse_test2=math.sqrt(mse_test2)\rtest_error2.append(rmse_test2)\rlists=sorted(zip(*[X,y_pred2]))\rX,y_pred2 = list(zip(*lists))\rplt.scatter(X,Y,color='black')\rplt.plot(X, y_pred2, color='g')\rplt.plot(x_rn,y_rn,color='r')\r_=plt.xlabel(\u0026quot;X--\u0026gt;\u0026quot;)\r_=plt.ylabel(\u0026quot;t--\u0026gt;\u0026quot;)\rplt.show()\r#print('Score: {}'.format(model1.score(X,Y)))\r#print('Test :{}' .format(model1.score(x_test.reshape(-1,1),y_test.reshape(-1,1))))\r Plotting Training vs Test values for various lambda plt.plot(np.log(lbd),train_error2,label='train error')\rplt.plot(np.log(lbd),test_error2,label='test error')\r#plt.xscale(\u0026quot;log\u0026quot;)\r#plt.xticks(np.arange(0, 1.1, 0.1))\rplt.xlim(-10,0)\rplt.legend(loc=\u0026quot;upper right\u0026quot;)\r_=plt.xlabel(\u0026quot;ln(lambda)\u0026quot;)\r_=plt.ylabel(\u0026quot;E(RMS)\u0026quot;)\rplt.show()\r#print(test_error2)\r Based on best test perfomance the Ridge model helps us to regularize our overfitting which we could not do throug LinearRegression. We observe that as the model complexity increases,bias decreases and variance increases and vice versa.Also,we can see that as the lambda value decreases we get a good training score and we obtain the best training score for lambda =1/100000.But thats not the case with the testing score.Before we regularise, we see that the model of degree 9 fits all the data points but leads to overfitting.So a polynoial regression model of degree 6 will be best amongst what we tried without leading to overfit.Also after we regularize we see that the lambda values are almost constant before increasing so the model with lambda 1/1000 seems to be the best  ","date":1567296000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1567296000,"objectID":"d1fbd2368984ab1e3228f518123c62c2","permalink":"https://sushantmhambrey.github.io/post/assn1/","publishdate":"2019-09-01T00:00:00Z","relpermalink":"/post/assn1/","section":"post","summary":"We know that even though linear models can provide good training models rudimentarily, there are lots of situations where the variables don\u0026rsquo;t reveal a linear relationship. Thus we need to create polynomial models for such datasets.One major issue with polynomial models is that they are suspectible to overfitting.In this article we will look at how a higher degree polynomial model overfits a dataset to create a perfect training environment as opposed to it\u0026rsquo;s errors introduced while testing on the same degree.","tags":null,"title":"UNDERSTANDING OVERFITTING USING POLYNOMIAL REGRESSION","type":"post"}]
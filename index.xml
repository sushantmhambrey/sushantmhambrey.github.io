<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Academic</title>
    <link>https://sushantmhambrey.github.io/</link>
      <atom:link href="https://sushantmhambrey.github.io/index.xml" rel="self" type="application/rss+xml" />
    <description>Academic</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Fri, 06 Mar 2020 04:19:38 -0600</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>Academic</title>
      <link>https://sushantmhambrey.github.io/</link>
    </image>
    
    <item>
      <title>NLP</title>
      <link>https://sushantmhambrey.github.io/project/nlp/</link>
      <pubDate>Fri, 06 Mar 2020 04:19:38 -0600</pubDate>
      <guid>https://sushantmhambrey.github.io/project/nlp/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Data Pipeline </title>
      <link>https://sushantmhambrey.github.io/project/pipe/</link>
      <pubDate>Wed, 29 Jan 2020 23:00:49 -0600</pubDate>
      <guid>https://sushantmhambrey.github.io/project/pipe/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Virtual Shoe Trial</title>
      <link>https://sushantmhambrey.github.io/project/be/</link>
      <pubDate>Wed, 29 Jan 2020 23:00:39 -0600</pubDate>
      <guid>https://sushantmhambrey.github.io/project/be/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Simulation of Random Variables</title>
      <link>https://sushantmhambrey.github.io/project/damt/</link>
      <pubDate>Wed, 29 Jan 2020 23:00:32 -0600</pubDate>
      <guid>https://sushantmhambrey.github.io/project/damt/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Connect4 board game </title>
      <link>https://sushantmhambrey.github.io/project/ai/</link>
      <pubDate>Wed, 29 Jan 2020 22:20:31 -0600</pubDate>
      <guid>https://sushantmhambrey.github.io/project/ai/</guid>
      <description></description>
    </item>
    
    <item>
      <title>My first title</title>
      <link>https://sushantmhambrey.github.io/post/nlp1/</link>
      <pubDate>Sun, 01 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://sushantmhambrey.github.io/post/nlp1/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
import matplotlib.pyplot as plt

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x1=[]
y1=[5,10,15,20,25,30]
for i in range(100):
    x1.append(i)
print(x1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.hist([10,20,30,40,50],bins=10)
plt.xlabel(&amp;quot;data&amp;quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_3_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>UNDERSTANDING OVERFITTING USING POLYNOMIAL REGRESSION</title>
      <link>https://sushantmhambrey.github.io/post/overfit/index1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://sushantmhambrey.github.io/post/overfit/index1/</guid>
      <description>&lt;p style=&#34;font-family:Georgia;font-size:18px;background-color:#2455d1;color:white;&#34;&gt;
We know that even though linear models can provide good training models rudimentarily, there are lots of situations where the variables don&#39;t reveal a linear relationship.
Thus we need to create polynomial models for such datasets.One major issue with polynomial models is that they are suspectible to overfitting.In this article we will look at how a higher degree polynomial model overfits a dataset to create a perfect training environment as opposed to it&#39;s errors introduced while testing on the same degree.We will further look at how regularization helps to tackel overfitting and what values of hyperparameters produce the best results.&lt;/p&gt;
&lt;p style=background-color:#6aa2de;font-weight:bold;font-size:15px;text-align:center;&gt;Importing the necessary libraries&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import math
import pandas as pd
import operator
import numpy as np
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Ridge
from sklearn.preprocessing import PolynomialFeatures
#from sklearn.linear_model import Lasso
#from sklearn.linear_model import ElasticNet
from sklearn.pipeline import make_pipeline
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler

&lt;/code&gt;&lt;/pre&gt;
&lt;p style=background-color:#6aa2de;font-weight:bold;font-size:15px;text-align:center;&gt;
Creating X,Y data pairs.Here x is sampled from a uniform distribution and N from a gaussian normal distribution&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#we can change the seed value to get different randome numbers for our x,N values
np.random.seed(45)
x=np.random.uniform(low=0,high=1,size=20)
mu=0
sigma=1
#N is based on a gaussian normal distribution
N=np.random.normal(mu,sigma,size=20)
y=(np.sin(2*np.pi*x))+N
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#splitting the dataset into 10 for training and 10 for testing
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.5)
x_train
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([0.97600332, 0.62739168, 0.44053089, 0.99072168, 0.16332445,
       0.07728957, 0.28266721, 0.673068  , 0.47280797, 0.048522  ])
&lt;/code&gt;&lt;/pre&gt;
&lt;p style=background-color:#6aa2de;font-weight:bold;font-size:15px;text-align:center;&gt; 
    Displaying weights of polynomial regression within the table&lt;/p&gt;
  &lt;p&gt; As we can see the polynomial degree of order 9 has coefficients ranging from x to the power 0 up until x to the power 9 ; a total of 10 coefficients &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#pip install plotly(plotly not available on some jupyter)
import plotly.graph_objects as go
from IPython.display import display
def give_weights(x,y,degree):
    poly_coefficients=np.polyfit(x,y,degree)
    return poly_coefficients

#calling the &#39;gove_weights&#39; function for degrees of 0,1,6,9
degree_0=give_weights(x_train,y_train,0)
degree_1=give_weights(x_train,y_train,1)
degree_6=give_weights(x_train,y_train,6)
degree_9=give_weights(x_train,y_train,9)

#creating the table for weights
coeff=[&#39;w0*&#39;, &#39;w1*&#39;,&#39;w2*&#39;, &#39;w3*&#39;, &#39;w4*&#39;, &#39;w5*&#39;, &#39;w6*&#39;, &#39;w7*&#39;, &#39;w8*&#39;,&#39;w9*&#39;]
#fig = go.Figure(data=[go.Table(header=dict(values=[&#39; &#39;,&#39;M=0&#39;, &#39;M=1&#39;,&#39;M=3&#39;,&#39;M=9&#39;]),
#cells=dict(values=[coeff,degree_0,degree_1,degree_6,degree_9])) 

#df = pd.DataFrame(data=numpy_data,columns=[&amp;quot;w0&amp;quot;])
#print(df)

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#a reference true fit graph to see how our data fits with different polynomial degrees
x_rn=np.linspace(0,1,100)
y_rn=(np.sin(2*np.pi*x_rn))
plt.scatter(x_train,y_train,s=10,color=&amp;quot;red&amp;quot;)
plt.plot(x_rn,y_rn)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index1_9_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p style=background-color:#6aa2de;font-weight:bold;font-size:15px;text-align:center;&gt; 
 Making the graphs for fit data with the specific degrees ranging from 0 to 9 &lt;/p&gt;
 &lt;p style=font-weight:bold;&gt; We can observe that as we increase the degree of our polynomial regression model , the graph tends to cover all the datapoints leading to overfitting &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sklearn.pipeline import make_pipeline
#x = np.sort(x_train[:])
#y=np.sort(y_train[:])
train_error=[]
test_error=[] 
for i in range(10):
    plt.title(&#39;Degree %d&#39; %i)
    plt.text(0.7, .55, &#39;M=%d&#39; %i)
    X = x_train[:, np.newaxis]
    Y = y_train[:, np.newaxis]
    X1 = x_test[:,np.newaxis]
    Y1 = y_test[:,np.newaxis]
    #we first make use of the linearregression model to observe how it overfits at higher degrees.
    model = make_pipeline(PolynomialFeatures(i), LinearRegression())

    model.fit(X,Y)
    y_pred = model.predict(X)
    mse = (mean_squared_error(Y,y_pred))
    rmse=math.sqrt(mse)
    train_error.append(rmse)
    
    y_test_pred=model.predict(X1)
    mse_test= (mean_squared_error(Y1,y_test_pred))
    rmse_test=math.sqrt(mse_test)
    test_error.append(rmse_test)
    #sorting
    lists=sorted(zip(*[X,y_pred]))
    X,y_pred = list(zip(*lists))
    #plotting the models at various degrees.
    plt.scatter(x_train, y_train,color=&#39;black&#39;,label=&#39;data points&#39;)
    plt.plot(X, y_pred, color=&#39;g&#39;,label=&#39;degree_fit&#39;)
    plt.plot(x_rn,y_rn,color=&#39;r&#39;,label=&#39;true_fit&#39;)
    plt.legend(loc=&amp;quot;lower left&amp;quot;)
    _=plt.xlabel(&amp;quot;X--&amp;gt;&amp;quot;)
    _=plt.ylabel(&amp;quot;t--&amp;gt;&amp;quot;)
    plt.show()
    
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index1_11_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./index1_11_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./index1_11_2.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./index1_11_3.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./index1_11_4.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./index1_11_5.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./index1_11_6.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./index1_11_7.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./index1_11_8.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./index1_11_9.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p style=background-color:#6aa2de;font-weight:bold;font-size:15px;text-align:center;&gt; 
    Plotting training vs test error
    &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.plot(train_error,label=&#39;train error&#39;)
plt.plot(test_error,label=&#39;test error&#39;)
plt.xticks(np.arange(0, 10, 1.0))
plt.legend(loc=&amp;quot;upper left&amp;quot;)
_=plt.xlabel(&amp;quot;M&amp;quot;)
_=plt.ylabel(&amp;quot;E(RMS)&amp;quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index1_13_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p style=background-color:#6aa2de;font-weight:bold;font-size:15px;text-align:center;&gt; 
    Generating 100 data points and fitting ninth order model on it &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#creating 100 data points
np.random.seed(10)
x2=np.random.uniform(low=0,high=1,size=100)
mu=0
sigma=1
N2=np.random.normal(mu,sigma,size=100)
y2=(np.sin(2*np.pi*x2))+N2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x_train100, x_test100, y_train100, y_test100 = train_test_split(x2, y2, test_size=0.01)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;X100 = x_train100[:, np.newaxis]
Y100 = y_train100[:, np.newaxis]
model = make_pipeline(PolynomialFeatures(9), LinearRegression())

#fitting the 100 data points of the ninth order model.
model.fit(X100,Y100)
y_pred100 = model.predict(X100)

 #sorting
lists=sorted(zip(*[X100,y_pred100]))
X100,y_pred100 = list(zip(*lists))
    
plt.scatter(x_train100, y_train100,color=&#39;#3299a8&#39;,label=&#39;data points&#39;)
plt.plot(X100, y_pred100, color=&#39;r&#39;,label=&#39;model fit&#39;)
plt.plot(x_rn,y_rn,color=&#39;b&#39;,label=&#39;true fit&#39;)
plt.legend(loc=&amp;quot;lower left&amp;quot;)
_=plt.xlabel(&amp;quot;X--&amp;gt;&amp;quot;)
_=plt.ylabel(&amp;quot;Y--&amp;gt;&amp;quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index1_17_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p style=background-color:#6aa2de;font-weight:bold;font-size:15px;text-align:center;&gt; Regularisation and graph creation for different values of lambda&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lbd=[1, 1/10, 1/100, 1/1000, 1/10000, 1/100000]
plt.ylim(-2,2)
train_error2=[]
test_error2=[]
for i in range(6):
    model1= make_pipeline(StandardScaler(),PolynomialFeatures(degree=9), Ridge(alpha=lbd[i],fit_intercept=True))
    
    model1.fit(X,Y)
    y_pred2 = model1.predict(X)
    mse2 = (mean_squared_error(Y,y_pred2))
    rmse2=math.sqrt(mse2)
    train_error2.append(rmse2)
    
    y_test_pred2=model1.predict(X1)
    mse_test2= (mean_squared_error(Y1,y_test_pred2))
    rmse_test2=math.sqrt(mse_test2)
    test_error2.append(rmse_test2)
    
    lists=sorted(zip(*[X,y_pred2]))
    X,y_pred2 = list(zip(*lists))
    
    plt.scatter(X,Y,color=&#39;black&#39;)
    plt.plot(X, y_pred2, color=&#39;g&#39;)
    plt.plot(x_rn,y_rn,color=&#39;r&#39;)
    _=plt.xlabel(&amp;quot;X--&amp;gt;&amp;quot;)
    _=plt.ylabel(&amp;quot;t--&amp;gt;&amp;quot;)
    plt.show()
    #print(&#39;Score: {}&#39;.format(model1.score(X,Y)))
    #print(&#39;Test :{}&#39; .format(model1.score(x_test.reshape(-1,1),y_test.reshape(-1,1))))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index1_19_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./index1_19_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./index1_19_2.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./index1_19_3.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./index1_19_4.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./index1_19_5.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p style=background-color:#6aa2de;font-weight:bold;font-size:15px;text-align:center;&gt; Plotting Training vs Test values for various lambda &lt;/p&gt; 
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.plot(np.log(lbd),train_error2,label=&#39;train error&#39;)
plt.plot(np.log(lbd),test_error2,label=&#39;test error&#39;)
#plt.xscale(&amp;quot;log&amp;quot;)
#plt.xticks(np.arange(0, 1.1, 0.1))
plt.xlim(-10,0)
plt.legend(loc=&amp;quot;upper right&amp;quot;)
_=plt.xlabel(&amp;quot;ln(lambda)&amp;quot;)
_=plt.ylabel(&amp;quot;E(RMS)&amp;quot;)
plt.show()
#print(test_error2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index1_21_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p style=&#34;font-family:Georgia;font-size:16px;background-color:#2455d1;color:white;&#34;&gt; Based on best test perfomance the Ridge model helps us to regularize our overfitting which we could not do throug LinearRegression. We observe that as the model complexity increases,bias decreases and variance increases and vice versa.Also,we can see that as the lambda value decreases we get a good training score and we obtain the best training score for lambda =1/100000.But thats not the case with the testing score.Before we regularise, we see that the model of degree 9 fits all the data points but leads to overfitting.So a polynoial regression model of degree 6 will be best amongst what we tried without leading to overfit.Also after we regularize we see that the lambda values are almost constant before increasing so the model with lambda 1/1000 seems to be the best &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
